# This role applies to any Agave server. Creates base accounts, sets up ssh keys, etc.
# Should be run whenver running a deployment or adding a new host.
---

- name: Detect /etc/sudoers
  stat: path=/etc/sudoers
  register: etc_sudoers

- name: Disable sudo requiretty for Ansible pipelining
  lineinfile: dest=/etc/sudoers regexp="^Defaults(\s+)(.*)requiretty(.*)" line="#Defaults\1\2requiretty\3" backrefs=yes
  become: yes
  when: etc_sudoers.stat.exists
  ignore_errors: True

- name: Remove apim dir
  shell: rm -rf /home/apim
  become: yes
  when: clean_host
  ignore_errors: True

- name: Remove ansible temp dir
  shell: rm -rf /root/.ansible/tmp
  become: yes
  when: clean_host
  ignore_errors: True

- name: Remove containers
  shell: "docker ps -aq | xargs --no-run-if-empty docker rm -f"
  become: yes
  when: clean_host
  ignore_errors: True

- name: Add agave services user
  user: name={{ agave_linux_user_name }} generate_ssh_key=yes state=present
  become: yes

- name: Add vagrant user to sudoers with no password
  lineinfile:
    dest: /etc/sudoers.d/99-vagrant-user
    line: 'vagrant ALL=(ALL) NOPASSWD:ALL'
    state: present
    create: yes
  become: yes
  when: ansible_ssh_user == "vagrant"

- name: Add user apim to sudoers with no password
  lineinfile:
    dest: /etc/sudoers.d/99-apim-user
    line: 'apim ALL=(ALL) NOPASSWD:ALL'
    state: present
    create: yes
  become: yes

- name: Add user apim's key to authorized keys
  shell: cat id_rsa.pub > authorized_keys chdir=/home/apim/.ssh creates=/home/apim/.ssh/authorized_keys
  become: yes
  become_user: apim

- name: Ensure permissions on apim sudoers
  file: path=/etc/sudoers.d/99-apim-user mode=0440 owner=root
  become: yes

- name: Ensure .bashrc file is present
  shell: cp -n /etc/skel/{{item}} /home/apim/{{item}}
  become: yes
  become_user: apim
  when: clean_host
  with_items:
    - ".bashrc"
    - ".bash_logout"
    - ".bash_profile"

- name: Remove lines expanding aliases on remote commands from .bashrc
  lineinfile: dest=/home/apim/.bashrc
              line="^shopt -s expand_aliases"
              state=absent
  become: yes
  become_user: apim

- name: Add shopt -s expand_aliases to .bashrc file to expand aliases on remote commands
  lineinfile: dest=/home/apim/.bashrc
              line="shopt -s expand_aliases"
              state=present
  become: yes
  become_user: apim

- name: Create .bashrc.d directory to hold custom scripts to source on login
  file:
    path: /home/apim/.bashrc.d
    state: directory
  become: yes
  become_user: apim

- name: Remove sourcing of .bashrc.d folder contents from .bashrc file
  lineinfile: dest=/home/apim/.bashrc
              regexp="^if \[\[ -e \$HOME/\.bashrc\.d \]\]"
              state=absent
  become: yes

- name: Add sourcing of .bashrc.d folder contents at login to .bashrc file
  lineinfile: dest=/home/apim/.bashrc
              line="if [[ -e $HOME/.bashrc.d ]] && [[ -d $HOME/.bashrc.d ]]; then for i in $(ls $HOME/.bashrc.d); do source $HOME/.bashrc.d/$i ; done fi"
              state=present
  become: yes
  become_user: apim

- name: Disabling known http proxy config file settings on host
  include_tasks: disable_http_proxies.yml
  when: disable_http_proxies|bool

- name: Give other users access to apim home directory
  file: path=/home/apim mode=0750
  become: yes

- name: Install jq binary
  get_url:
    url: https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
    dest: /usr/local/bin/jq
    mode: 0755
  become: yes

- name: Add common RHEL software packages
  yum: name='{{ item }}' state=present update_cache=yes
  become: yes
  when: ansible_os_family == "RedHat"
  with_items:
      - ntp

- name: Add common Debian software packages
  apt: name='{{ item }}' state=present update_cache=yes
  become: yes
  when: ansible_os_family == "Debian"
  with_items:
      - ntp

- name: Ensure services enabled
  service: name='{{ item }}' state=started enabled=yes
  become: yes
  loop:
  - ntpd

- name: "Add {{ extra_paths }} to default system path"
  become: yes
  lineinfile:
    dest: /etc/profile
    state: present
    create: true
    insertbefore: '^HOSTNAME=.*'
    line: 'pathmunge /usr/local/bin'
  loop: "{{ extra_paths }}"
  loop_control:
    loop_var: extra_path

#- name: add /usr/local/bin to root user path
#  lineinfile:
#    dest: /etc/profile.d/sh.local
#    line: "export PATH=$PATH:/usr/local/bin"
#    state: present
#  become: yes