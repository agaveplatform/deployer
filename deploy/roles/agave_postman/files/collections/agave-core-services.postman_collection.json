{
  "variables": [],
  "info": {
    "name": "agave-core-services-Filtered",
    "_postman_id": "cce65a02-0353-757b-4980-aa5a9032d52d",
    "description": "Agave API tests ready for production use.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "000 setup",
      "description": "",
      "item": [
        {
          "name": "Create a New Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"Create a New Client: \";",
                  "",
                  "try {",
                  "    // successful response, validate the returned key",
                  "    if(responseCode.code===200 || responseCode.code===201) {",
                  "       ",
                  "        var agaveResponse=JSON.parse(responseBody);",
                  "        tests[requestname+\"Objected returned . . .\"]=(agaveResponse.result instanceof Object);",
                  "        tests[requestname+\"Client key returned . . .\"]=(agaveResponse.result.consumerKey.length>0);",
                  "        tests[requestname+\"Client secret returned . . .\"]=(agaveResponse.result.consumerSecret.length>0);",
                  "        ",
                  "        // if a token was generated, keep for use in the suite",
                  "        if (tests[requestname+\"Client key returned . . .\"] && tests[requestname+\"Client secret returned . . .\"]) {",
                  "            postman.setEnvironmentVariable(\"CLIENT_KEY\",agaveResponse.result.consumerKey);",
                  "            postman.setEnvironmentVariable(\"CLIENT_SECRET\",agaveResponse.result.consumerSecret);",
                  "        }",
                  "        // clean up the client just in case it was created",
                  "        else {",
                  "            console.log(requestname+responseBody);",
                  "            postman.setNextRequest(\"cleanup::Start\");",
                  "        }",
                  "    }",
                  "    // a 404 is valid in the event we are running backend tests",
                  "    else if(responseCode.code===404 && postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "        var nextRequest = \"Create a Storage System\";",
                  "        console.log(\"Skipping frontend client key generation. Backend tests enabled...\");",
                  "        console.log(\"Next request: \" + nextRequest);",
                  "        tests[requestname+\"Skip client creation calls . . .\"]=true;",
                  "        postman.setNextRequest(nextRequest);",
                  "    }",
                  "    // anything else is an error ",
                  "    else {",
                  "        throw new Exception(responseBody);",
                  "    }",
                  "}",
                  "catch(e){",
                  "    ",
                  "    if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "        tests[requestname+\"Skip client creation calls . . .\"]=true;",
                  "        postman.setNextRequest(\"Create a Storage System\");",
                  "    }",
                  "    else {",
                  "        tests[requestname+\"Fetch new credential for tests . . .\"]=false;",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "        // stop all tests",
                  "        postman.setNextRequest(null);",
                  "    }",
                  "}",
                  "    ",
                  "    ",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if ( ! Object.has(environment,'CLIENTS_VERSION') ) {",
                  "    postman.setEnvironmentVariable('CLIENTS_VERSION','');",
                  "}",
                  "",
                  "var date=new Date();",
                  "if ( Object.has(environment,'TEST_DATE') ) {",
                  "    console.log(\"Using existing timestamp from the environment.\");",
                  "}",
                  "else {",
                  "    console.log(\"No TEST_DATE provided. Generating timestamp from the environment.\");",
                  "    postman.setEnvironmentVariable(\"TEST_DATE\", date.getTime().toString());",
                  "}",
                  "",
                  "postman.setEnvironmentVariable(\"CLIENT_NAME\",\"postman-test-client-\"+environment[\"TEST_DATE\"]);",
                  "",
                  "postman.setEnvironmentVariable(\"STORAGE_SYSTEM_ID\",\"postman-test-storage-\"+environment[\"TEST_DATE\"]);",
                  "postman.setEnvironmentVariable(\"COMPUTE_SYSTEM_ID\",\"postman-test-compute-\"+environment[\"TEST_DATE\"]);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR\",\"postman-test-\"+environment[\"TENANT_CODE\"]+\"-\"+environment[\"USERNAME\"]+\"-\"+environment[\"TEST_DATE\"]);",
                  "",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_TYPE\",\"Basic\");",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_USER_TOKEN\",btoa(environment[\"USERNAME\"]+\":\"+environment[\"PASSWORD\"]));",
                  "",
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"clients::Start\");",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "clientName",
                  "value": "{{CLIENT_NAME}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "description",
                  "value": "",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "tier",
                  "value": "Unlimited",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "callbackUrl",
                  "value": "",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Generate an Access Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"Generate an Access Token: \";",
                  "",
                  "function firstcap(astring){",
                  "    return astring.substr(0,1).toUpperCase()+astring.substr(1);",
                  "}",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]) {",
                  "    ",
                  "    var result=JSON.parse(responseBody);",
                  "    ",
                  "    tests[requestname+\"Access token generated . . . \"]=result[\"token_type\"]===\"bearer\";",
                  "    ",
                  "    if(tests[requestname+\"Access token generated . . . \"]){",
                  "        ",
                  "        postman.setEnvironmentVariable(\"AUTHORIZATION_TYPE\",firstcap(result[\"token_type\"]));",
                  "        postman.setEnvironmentVariable(\"AUTHORIZATION_TOKEN\",result[\"access_token\"]);",
                  "        ",
                  "    }",
                  "}",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"AUTHORIZATION_TOKEN\",null);",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_TOKEN\",btoa(environment[\"CLIENT_KEY\"]+\":\"+environment[\"CLIENT_SECRET\"]));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/token",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{USERNAME}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "password",
                  "value": "{{PASSWORD}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "scope",
                  "value": "PRODUCTION",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Generate an Access Token"
          },
          "response": []
        },
        {
          "name": "Create a Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"Create a Storage System: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment[\"STORAGE_SYSTEM_ID\"];",
                  "            postman.setEnvironmentVariable(\"STORAGE_UUID\",result[\"result\"][\"uuid\"]);",
                  "            postman.setEnvironmentVariable(\"_TMP_STORAGE_URL\",result[\"result\"]._links.self.href);",
                  "            postman.setEnvironmentVariable(\"HOMEDIR\",result[\"result\"][\"storage\"][\"homeDir\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "}  ",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if ( ! Object.has(environment,'SYSTEMS_VERSION') ) {",
                  "    postman.setEnvironmentVariable('SYSTEMS_VERSION','');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"id\": \"{{STORAGE_SYSTEM_ID}}\",\n   \"name\": \"System Sandbox Configured as Storage System\",\n   \"status\":\"UP\",\n   \"type\":\"STORAGE\",\n   \"description\":\"Testing Storage System\",\n   \"site\":\"agaveapi.co\",\n   \"storage\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\":\"SFTP\",\n      \"rootDir\":\"/\",\n      \"homeDir\":\"{{systemhomedir}}\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\": \"SSHKEYS\"\n      }\n   }\n}\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create an Execution System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"Create an Execution System: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try",
                  "    {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment[\"COMPUTE_SYSTEM_ID\"];",
                  "            postman.setEnvironmentVariable(\"COMPUTE_SYSTEM_UUID\",result[\"result\"][\"uuid\"]);",
                  "            postman.setEnvironmentVariable(\"_TMP_COMPUTE_URL\",result[\"result\"]._links.self.href);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "}  ",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if ( ! Object.has(environment,'SYSTEMS_VERSION') ) {",
                  "    postman.setEnvironmentVariable('SYSTEMS_VERSION','');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{COMPUTE_SYSTEM_ID}}\",\n  \"name\": \"System Sandbox Configured as Execution System\",\n  \"status\": \"UP\",\n  \"type\": \"EXECUTION\",\n    \"description\": \"Testing Execution System\",\n  \"site\": \"agaveapi.co\",\n  \"executionType\": \"CLI\",\n    \"scratchDir\": null,\n    \"workDir\": null,\n   \"queues\": [\n     {\n       \"name\": \"debug\",\n       \"maxJobs\": 100,\n       \"maxUserJobs\": 10,\n       \"maxNodes\": 128,\n       \"maxMemoryPerNode\": \"2GB\",\n       \"maxProcessorsPerNode\": 128,\n       \"maxRequestedTime\": \"24:00:00\",\n       \"customDirectives\": \"\",\n       \"default\": true\n     }\n   ],\n   \"login\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\": \"SSH\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\":\"SSHKEYS\"\n      }\n   },\n   \"storage\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\":\"SFTP\",\n      \"rootDir\":\"/\",\n      \"homeDir\":\"{{systemhomedir}}\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\":\"SSHKEYS\"\n      }\n   },\n   \"maxSystemJobs\": 100,\n   \"maxSystemJobsPerUser\": 10,\n   \"scheduler\": \"FORK\",\n   \"environment\": \"\",\n   \"startupScript\": \".bashrc\"\n}\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "Create Default Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"Create Default Storage System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment[\"STORAGE_SYSTEM_ID\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "} ",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}",
                  "",
                  "if (postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest(postman.getEnvironmentVariable(\"SKIP_TO_TEST\"));",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if ( ! Object.has(environment,'SYSTEMS_VERSION') ) {",
                  "    postman.setEnvironmentVariable('SYSTEMS_VERSION','');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"setDefault\",\n    \"id\": \"{{STORAGE_SYSTEM_ID}}\"\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "005 _clients setup",
      "description": "",
      "item": [
        {
          "name": "clients::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::Start: \";",
                  "",
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "   console.log(\"Front end tests disabled. Skipping remaining \" + requestname.replace(/::.*/,'::End') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}",
                  "else {",
                  "    tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "    if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "        console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "        postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "005 clients",
      "description": "",
      "item": [
        {
          "name": "clients::List Existing Clients",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::List Existing Clients: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Clients retrieved successfully.\";",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "clients::Create a New Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::Create a New Client: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Client created successfully.\";",
                  "            tests[requestname+\"Checking client name . . . \"]=result[\"result\"][\"name\"]===(environment[\"CLIENT_NAME\"]+\"-2\");",
                  "            tests[requestname+\"Checking client description . . . \"]=result[\"result\"][\"description\"]===data[\"clientDescription\"];",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"clientName\":       \"{{CLIENT_NAME}}-2\",\n    \"description\":      \"{{clientDescription}}\",\n    \"tier\":             \"UNLIMITED\",\n    \"callbackURL\":      null\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "clients::Return Details of Named Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::Return Details of Named Client: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Client details retrieved successfully.\";",
                  "            tests[requestname+\"Checking client name . . . \"]=result[\"result\"][\"name\"]===(environment[\"CLIENT_NAME\"]+\"-2\");",
                  "            tests[requestname+\"Checking client description . . . \"]=result[\"result\"][\"description\"]===data[\"clientDescription\"];",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}-2",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "clients::List All Client's Subscribed APIs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::List All Client's Subscribed APIs: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Client subscriptions retrieved successfully.\";",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}-2/subscriptions",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "clients::Unsubscribe Client from All APIs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::Unsubscribe Client from All APIs: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===(\"All APIs have been removed from the client \"+environment[\"CLIENT_NAME\"]+\"-2.\");",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}-2/subscriptions",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "apiName",
                  "value": "*",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "clients::Subscribe Client to an API",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::Subscribe Client to an API: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}-2/subscriptions",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"apiName\": \"apps\",\n    \"apiVersion\": \"v2\",\n    \"apiProvider\": \"admin\",\n    \"tier\": \"UNLIMITED\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "clients::Unsubscribe Client from a Single API",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"Uubscribe client from a single API: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}-2/subscriptions",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"apiName\": \"apps\",\n    \"apiVersion\": \"v2\",\n    \"apiProvider\": \"admin\",\n    \"tier\": \"UNLIMITED\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "clients::Delete the Test Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::Delete the Test Client: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Client removed successfully.\";",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}-2",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "005 ~ clients cleanup",
      "description": "",
      "item": [
        {
          "name": "clients::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "010 _profiles setup",
      "description": "",
      "item": [
        {
          "name": "profiles::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::Start: \";",
                  "",
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\") && environment['TENANT_CODE'] !== 'iplantc.org') {",
                  "    console.log(\"Front end tests disabled.\");",
                  "    console.log(\"Profile backend is not available in \" +  environment['TENANT_CODE'] + \" tenant. Skipping remaining service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}",
                  "else {",
                  "    tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "    if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "        console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "        postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}/me",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "010 profiles",
      "description": "",
      "item": [
        {
          "name": "profiles::Find User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::Find User Profile: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking for username . . . \"]=result[\"result\"][\"username\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"profiles::End\");",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}me",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "profiles::Find Profile by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::Find Profile by Username: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking for username . . . \"]=result[\"result\"][\"username\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"profiles::End\");",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}{{USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "profiles::Search by username Search Term",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::Search by username Search Term: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for username . . . \"]=false;",
                  "                for(var i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) tests[requestname+\"Checking for username . . . \"]=true;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"profiles::End\");",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}?username={{USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "profiles::Search by email Search Term",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::Search by email Search Term: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for username . . . \"]=false;",
                  "                for(var i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) tests[requestname+\"Checking for username . . . \"]=true;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"profiles::End\");",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}?email={{USER_EMAIL}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "profiles::Search by first_name Search Term",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::Search by first_name Search Term: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for username . . . \"]=false;",
                  "                for(var i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) tests[requestname+\"Checking for username . . . \"]=true;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"profiles::End\");",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}?first_name={{USER_FIRST_NAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "profiles::Search by status Search Term",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::Search by status Search Term: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                var matches = result[\"result\"].count(function(user) {",
                  "                        return user.username === environment['USERNAME'];",
                  "                    });",
                  "                    ",
                  "                if (\"Active\" === environment['USER_STATUS']) {",
                  "                    tests[requestname+\"Checking user is present . . . \"]=matches>0;",
                  "                } ",
                  "                else {",
                  "                    tests[requestname+\"Checking user is not present . . . \"]=matches===0;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"profiles::End\");",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}?status=Active",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "profiles::List Internal Users Created by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::List Internal Users Created by User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest(\"profiles::End\");",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}{{USERNAME}}/users",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "010 ~ profiles cleanup",
      "description": "",
      "item": [
        {
          "name": "profiles::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"profiles::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "015 _systems setup",
      "description": "",
      "item": [
        {
          "name": "systems::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "015 systems",
      "description": "",
      "item": [
        {
          "name": "systems::Create a Storage System Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Create a Storage System Test: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try {",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"id\": \"{{STORAGE_SYSTEM_ID}}-2\",\n   \"name\": \"System Sandbox Configured as Storage System\",\n   \"status\":\"UP\",\n   \"type\":\"STORAGE\",\n   \"description\":\"Testing Storage System\",\n   \"site\":\"agaveapi.co\",\n   \"storage\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\":\"SFTP\",\n      \"rootDir\":\"{{systemrootdir}}\",\n      \"homeDir\":\"{{systemhomedir}}\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\": \"SSHKEYS\"\n      }\n   }\n}\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Show All Storage Systems Available to the User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Show All Storage Systems Available to the User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}?type=STORAGE&defaultOnly={{defaultOnly}}&publicOnly={{publicOnly}}&privateOnly={{privateOnly}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Show All Execution Systems Available to the User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Show All Execution Systems Available to the User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}?type=EXECUTION&defaultOnly={{defaultOnly}}&publicOnly={{publicOnly}}&privateOnly={{privateOnly}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Show All Auth Systems Available to the User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Show All Auth Systems Available to the User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}?type=AUTH&defaultOnly={{defaultOnly}}&publicOnly={{publicOnly}}&privateOnly={{privateOnly}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Modify Information About a System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Modify Information About a System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            tests[requestname+\"Checking result status . . . \"]=result[\"result\"][\"status\"]===\"DOWN\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"id\": \"{{STORAGE_SYSTEM_ID}}-2\",\n   \"name\": \"System Sandbox Configured as Storage System\",\n   \"status\":\"DOWN\",\n   \"type\":\"STORAGE\",\n   \"description\":\"Testing Storage System\",\n   \"site\":\"agaveapi.co\",\n   \"storage\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\":\"SFTP\",\n      \"rootDir\":\"{{systemrootdir}}\",\n      \"homeDir\":\"{{systemhomedir}}\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\": \"SSHKEYS\"\n      }\n   }\n}\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Restore Modified Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Restore Modified Information: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            tests[requestname+\"Checking result status . . . \"]=result[\"result\"][\"status\"]===\"UP\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"id\": \"{{STORAGE_SYSTEM_ID}}-2\",\n   \"name\": \"System Sandbox Configured as Storage System\",\n   \"status\":\"UP\",\n   \"type\":\"STORAGE\",\n   \"description\":\"Testing Storage System\",\n   \"site\":\"agaveapi.co\",\n   \"storage\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\":\"SFTP\",\n      \"rootDir\":\"{{systemrootdir}}\",\n      \"homeDir\":\"{{systemhomedir}}\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\": \"SSHKEYS\"\n      }\n   }\n}\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Find Information About an Individual System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Find Information About an Individual System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            tests[requestname+\"Checking result status . . . \"]=result[\"result\"][\"status\"]===\"UP\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Set a Default Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Set a Default Storage System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            tests[requestname+\"Checking default was set . . . \"]=result[\"result\"][\"default\"]===true;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"setDefault\",\n    \"id\": \"{{STORAGE_SYSTEM_ID}}-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Verify Default Storage System Set",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Verify Default Storage System Set: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            if(tests[requestname+\"Checking result is object . . . \"]) {",
                  "                tests[requestname+\"Checking that result contains system as default . . . \"]=result[\"result\"][\"default\"];",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Unset the Default Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Unset the Default Storage System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            tests[requestname+\"Checking default was unset . . . \"]=result[\"result\"][\"default\"]===false;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"unsetDefault\",\n    \"id\": \"{{STORAGE_SYSTEM_ID}}-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Verify Default Storage System Unset",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Verify Default Storage System Unset: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            if(tests[requestname+\"Checking result is object . . . \"]) {",
                  "                tests[requestname+\"Checking that result does not contain system as default . . . \"]=!result[\"result\"][\"default\"];",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::List All Users and Their Roles on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::List All Users and Their Roles on System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking that result contains owner . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) tests[requestname+\"Checking that result contains owner . . . \"]=true;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Get Specific User's Roles on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Get Specific User's Roles on System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking that result matches username . . . \"]=result[\"result\"][\"username\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Add/Update User's Role on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Add/Update User's Role on System: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for added user . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"username\"]===environment[\"SHARE_USERNAME\"]){",
                  "                        tests[requestname+\"Checking for added user . . . \"]=true;",
                  "                        tests[requestname+\"Checking for added user's role . . . \"]=result[\"result\"][i][\"role\"]===\"USER\";",
                  "                        ",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"role\": \"USER\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Check Added User Role in System Role Listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Check Added User Role in System Role Listing: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking that result contains shared user \" + environment['SHARE_USERNAME'] + \" . . . \"] = ",
                  "                    ! result.result.none(function(systemRole) {",
                  "                        return systemRole.username == environment['SHARE_USERNAME'] && ",
                  "                            systemRole.role == \"USER\";",
                  "                    });",
                  "                    ",
                  "                ",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Get Added User's Roles on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Get Added User's Roles on System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking that result matches username . . . \"]=result[\"result\"][\"username\"]===environment[\"SHARE_USERNAME\"];",
                  "            tests[requestname+\"Checking for added user's role . . . \"]=result[\"result\"][\"role\"]===\"USER\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Delete All User's Roles on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Delete All User's Roles on System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{SHARE_USERNAME}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Get Deleted User's Roles on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Get Deleted User's Roles on System: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"No roles found for user \"+environment[\"SHARE_USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Re-add User's Role on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Re-add User's Role on System: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for added user . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"username\"]===environment[\"SHARE_USERNAME\"]){",
                  "                        tests[requestname+\"Checking for added user . . . \"]=true;",
                  "                        tests[requestname+\"Checking for added user's role . . . \"]=result[\"result\"][i][\"role\"]===\"USER\";",
                  "                        ",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"role\": \"USER\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Check Re-Added User's Roles on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Check Re-Added User's Roles on System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking that result matches username . . . \"]=result[\"result\"][\"username\"]===environment[\"SHARE_USERNAME\"];",
                  "            tests[requestname+\"Checking for added user's role . . . \"]=result[\"result\"][\"role\"]===\"USER\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Set User's Role to NONE on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Set User's Role to NONE on System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking user role is NONE . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    if((result[\"result\"][i][\"username\"]===environment[\"SHARE_USERNAME\"])&&(result[\"result\"][i][\"role\"]===\"NONE\")){",
                  "                        tests[requestname+\"Checking user role is NONE . . . \"]=true;",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"role\": \"NONE\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Check User's Roles on System after granting NONE role",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Check User's Roles on System after granting NONE role: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            tests[requestname+\"Checking message . . . \"]=(result[\"message\"]);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Add/Update User's Role on System by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Add/Update User's Role on System by User: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for added user . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"username\"]===environment[\"SHARE_USERNAME\"]){",
                  "                        tests[requestname+\"Checking for added user . . . \"]=true;",
                  "                        tests[requestname+\"Checking for added user's role . . . \"]=result[\"result\"][i][\"role\"]===\"ADMIN\";",
                  "                        ",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{SHARE_USERNAME}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"role\": \"ADMIN\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Check ReAdded User's Admin Role on System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Check ReAdded User's Admin Role on System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking that result matches username . . . \"]=result[\"result\"][\"username\"]===environment[\"SHARE_USERNAME\"];",
                  "            tests[requestname+\"Checking for added user's role . . . \"]=result[\"result\"][\"role\"]===\"ADMIN\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Delete All Roles on a System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Delete All Roles on a System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Verify Removal of All Roles",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Verify Removal of All Roles: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking that result has only one entry . . . \"]=result[\"result\"].length===1;",
                  "                var foundOwner = false;",
                  "                for(i=0;i<result[\"result\"].length;i++) {",
                  "                    if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) { ",
                  "                        foundOwner=true;",
                  "                        break;",
                  "                    }",
                  "                }",
                  "                tests[requestname+\"Checking that result contains owner (\"+environment[\"USERNAME\"]+\"). . . \"]=foundOwner;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2/roles",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Disable a System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Disable a System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            tests[requestname+\"Checking result availability . . . \"]=result[\"result\"][\"available\"]===false;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"disable\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Verify System Disabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Verify System Disabled: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            if(tests[requestname+\"Checking result is object . . . \"]) {",
                  "                tests[requestname+\"Checking that system is disabled . . . \"]=!result[\"result\"][\"available\"];",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Enable a System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Enable a System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"STORAGE_SYSTEM_ID\"]+\"-2\");",
                  "            tests[requestname+\"Checking result availability . . . \"]=result[\"result\"][\"available\"]===true;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"enable\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Verify System Enabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Verify System Enabled: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            if(tests[requestname+\"Checking result is object . . . \"]) {",
                  "                tests[requestname+\"Checking that system is enabled . . . \"]=result[\"result\"][\"available\"];",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Clone a System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Clone a System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . .\"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"COMPUTE_SYSTEM_ID\"]+\".clone\");",
                  "            tests[requestname+\"Checking result availability . . . \"]=result[\"result\"][\"available\"]===true;",
                  "            tests[requestname+\"Checking cloned system ownership . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking queues are present . . . \"]=(result[\"result\"][\"queues\"].length > 0);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{COMPUTE_SYSTEM_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"clone\",\n    \"id\": \"{{COMPUTE_SYSTEM_ID}}.clone\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Set a Default Compute System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Set a Default Compute System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"COMPUTE_SYSTEM_ID\"]+\".clone\");",
                  "            tests[requestname+\"Checking default was set . . . \"]=result[\"result\"][\"default\"]===true;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{COMPUTE_SYSTEM_ID}}.clone",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"setDefault\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Verify Default Storage System Set copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Verify Default Compute System Set: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            if(tests[requestname+\"Checking result is object . . . \"]) {",
                  "                tests[requestname+\"Checking that result contains system as default . . . \"]=result[\"result\"][\"default\"];",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{COMPUTE_SYSTEM_ID}}.clone",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Unset the Default Compute System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Unset the Default Compute System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(environment[\"COMPUTE_SYSTEM_ID\"]+\".clone\");",
                  "            tests[requestname+\"Checking default was unset . . . \"]=result[\"result\"][\"default\"]===false;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{COMPUTE_SYSTEM_ID}}.clone",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"unsetDefault\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Verify Default Storage Compute Unset",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Verify Default Compute System Unset: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            if(tests[requestname+\"Checking result is object . . . \"]) {",
                  "                tests[requestname+\"Checking that result does not contain system as default . . . \"]=!result[\"result\"][\"default\"];",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{COMPUTE_SYSTEM_ID}}.clone",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Delete the Test Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Delete the Test Storage System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}-2",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Delete the Cloned Test Compute System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Delete the Test Compute System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{COMPUTE_SYSTEM_ID}}.clone",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Create a Storage System Multipart Form Upload Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Create a Storage System Multipart Form Upload Test:\";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=(responseCode.code===201||responseCode.code===201);",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try {",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===\"postman-test-storage-mp-\" + environment['TEST_DATE'];",
                  "            postman.setEnvironmentVariable('_TEMP_MULTIPART_STORAGE_SYSTEM_ID', result[\"result\"][\"id\"]);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "tmp/data/systems/storage.json"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::Delete the Multipart upload Test Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::Delete the Multipart upload Test Storage System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TEMP_MULTIPART_STORAGE_SYSTEM_ID\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{_TEMP_MULTIPART_STORAGE_SYSTEM_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "015 ~ systems cleanup",
      "description": "",
      "item": [
        {
          "name": "systems cleanup::Restore Default System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems cleanup::Restore Default System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment[\"STORAGE_SYSTEM_ID\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"setDefault\",\n    \"id\": \"{{STORAGE_SYSTEM_ID}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems cleanup::Verify Default Restored",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems cleanup::Verify Default Restored: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking that result contains system as default . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"id\"]===environment[\"STORAGE_SYSTEM_ID\"]) tests[requestname+\"Checking that result contains system as default . . . \"]=result[\"result\"][i][\"default\"];",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}?type=STORAGE",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "systems::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"systems::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "020 _ apps setup",
      "description": "",
      "item": [
        {
          "name": "apps::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// postman.setEnvironmentVariable('SAVE_INIT_ENVIRONMENT_VARIABLES', 'var apiNames=Object.select(environment,/_SERVICE$/);Object.keys(apiNames).forEach(function(a){var b=a.replace(/_SERVICE/,\"_VERSION\");Object.has(environment,b)||(console.log(b+\" was missing from environment. Setting to an empty value\"),postman.setEnvironmentVariable(b,\"\"))});');",
                  "",
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps setup::Create Base Directory for Apps",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps setup::Create Base Directory for Apps: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=((responseCode.code===201)||(responseCode.code==200));",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\", encodeURI(postman.getEnvironmentVariable(\"TEST_DIR\")+\"-apps\"));",
                  "",
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \"action\": \"mkdir\", \"path\": \"{{TEST_DIR_ENCODED}}\" }"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps setup::Create Directory for apps",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps setup::Create Directory for apps: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \"action\": \"mkdir\", \"path\": \"apps\" }"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps setup::Create Directory for apps/wc-1.00",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps setup::Create Directory for apps/wc-1.00: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \"action\": \"mkdir\", \"path\": \"wc-1.00\" }"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps setup::Stage wc App",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps setup::Stage wc App: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "wc",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "type": "file",
                  "enabled": true,
                  "src": "data/wc"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps setup::Stage wc App Wrapper",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps setup::Stage wc App Wrapper: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wrapper.sh\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileName",
                  "value": "wrapper.sh",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "type": "file",
                  "enabled": true,
                  "src": "data/wrapper.sh"
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "020 apps",
      "description": "",
      "item": [
        {
          "name": "apps::Register and Update New Application",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Register and Update New Application: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"].id===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"].name===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            postman.setEnvironmentVariable(\"APPS_ID\",result[\"result\"].id);",
                  "            postman.setEnvironmentVariable(\"APPS_REVISION_COUNT\", result[\"result\"].revision);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "",
                  "postman.setEnvironmentVariable(\"_TEMP_APP_UPDATE_COUNTER\", 0);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"wc-{{TEST_DATE}}-test\",\n  \"parallelism\": \"SERIAL\",\n  \"version\": \"1.00\",\n  \"helpURI\": \"http: //www.gnu.org/s/coreutils/manual/html_node/wc-invocation.html\",\n  \"label\": \"Word Count\",\n  \"shortDescription\": \"Count words in a file\",\n  \"longDescription\": \"\",\n  \"tags\": [\n    \"textutils\",\n    \"gnu\"\n  ],\n  \"ontology\": [\n    \"http: //sswapmeet.sswap.info/algorithms/wc\"\n  ],\n  \"defaultMemory\": 1,\n  \"defaultProcessors\": 1,\n  \"defaultQueue\": \"debug\",\n\t  \"deploymentPath\": \"{{TEST_DIR_ENCODED}}/apps/wc-1.00\",\n  \"deploymentSystem\": \"{{STORAGE_SYSTEM_ID}}\",\n  \"executionSystem\": \"{{COMPUTE_SYSTEM_ID}}\",\n  \"executionType\": \"CLI\",\n  \"templatePath\": \"wrapper.sh\",\n  \"testPath\": \"wrapper.sh\",\n  \"checkpointable\": false,\n  \"modules\": null,\n  \"inputs\": [\n    {\n      \"id\": \"query1\",\n      \"value\": {\n        \"default\": \"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper.sh\",\n        \"validator\": \"\",\n        \"required\": true,\n        \"visible\": true\n      },\n      \"details\": {\n        \"label\": \"File to count words in: \",\n        \"description\": \"\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"http: //sswapmeet.sswap.info/util/TextDocument\"\n        ],\n        \"minCardinality\": 1,\n        \"maxCardinality\": 1,\n        \"fileTypes\": [\n          \"text-0\"\n        ]\n      }\n    }\n  ],\n  \"parameters\": [\n    {\n      \"id\": \"printLongestLine\",\n      \"value\": {\n        \"type\": \"string\",\n        \"validator\": \"\",\n        \"visible\": true,\n        \"required\": false\n      },\n      \"details\": {\n        \"label\": \"Print the length of the longest line\",\n        \"description\": \"Command option -L\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"xs: boolean\"\n        ]\n      }\n    }\n  ]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Check for Registered App",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Check for Registered App: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking result contains app . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"id\"]===environment[\"APPS_ID\"]) tests[requestname+\"Checking result contains app . . . \"]=true;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get Details of App by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Get Details of App by ID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is added app . . . \"]=result[\"result\"][\"id\"]===environment[\"APPS_ID\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get App History",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Check for Registered App: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking history contains CREATED event . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) {",
                  "                    if(result[\"result\"][i].status==='CREATED') {",
                  "                        tests[requestname+\"Checking history contains CREATED event . . . \"]=true;",
                  "                    }",
                  "                }",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/history",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Update New Application",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Update New Application: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            tests[requestname+\"Checking revision incremented on update . . . \"]=result[\"result\"].revision==(parseInt(environment[\"APPS_REVISION_COUNT\"]) + 1);",
                  "            ",
                  "            if (environment[\"_TEMP_APPS_UPDATE_COUNTER\"] == 5) {",
                  "                postman.setEnvironmentVariable(\"_TEMP_APPS_UPDATE_COUNTER\", null);",
                  "            }",
                  "            ",
                  "            postman.setEnvironmentVariable(\"APPS_REVISION_COUNT\",result[\"result\"].revision);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var appUpdateCounter = environment[\"_TEMP_APP_UPDATE_COUNTER\"] || 0;",
                  "appUpdateCounter++;",
                  "",
                  "if ( appUpdateCounter < 5 ) {",
                  "    postman.setEnvironmentVariable(\"_TEMP_APP_UPDATE_COUNTER\", appUpdateCounter);",
                  "    postman.setNextRequest('apps::Update New Application');",
                  "}",
                  "",
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"wc-{{TEST_DATE}}-test\",\n  \"parallelism\": \"SERIAL\",\n  \"version\": \"1.00\",\n  \"helpURI\": \"http: //www.gnu.org/s/coreutils/manual/html_node/wc-invocation.html\",\n  \"label\": \"Word Count\",\n  \"shortDescription\": \"Count words in a file\",\n  \"longDescription\": \"\",\n  \"tags\": [\n    \"textutils\",\n    \"gnu\"\n  ],\n  \"ontology\": [\n    \"http: //sswapmeet.sswap.info/algorithms/wc\"\n  ],\n  \"defaultMemory\": 1,\n  \"defaultProcessors\": 1,\n  \"defaultQueue\": \"debug\",\n  \"deploymentPath\": \"{{TEST_DIR_ENCODED}}/apps/wc-1.00\",\n  \"deploymentSystem\": \"{{STORAGE_SYSTEM_ID}}\",\n  \"executionSystem\": \"{{COMPUTE_SYSTEM_ID}}\",\n  \"executionType\": \"CLI\",\n  \"templatePath\": \"wrapper.sh\",\n  \"testPath\": \"wrapper.sh\",\n  \"checkpointable\": false,\n  \"modules\": null,\n  \"inputs\": [\n    {\n      \"id\": \"query1\",\n      \"value\": {\n        \"default\": \"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper.sh\",\n        \"validator\": \"\",\n        \"required\": true,\n        \"visible\": true\n      },\n      \"details\": {\n        \"label\": \"File to count words in: \",\n        \"description\": \"\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"http: //sswapmeet.sswap.info/util/TextDocument\"\n        ],\n        \"minCardinality\": 1,\n        \"maxCardinality\": 1,\n        \"fileTypes\": [\n          \"text-0\"\n        ]\n      }\n    }\n  ],\n  \"parameters\": [\n    {\n      \"id\": \"printLongestLine\",\n      \"value\": {\n        \"type\": \"string\",\n        \"validator\": \"\",\n        \"visible\": true,\n        \"required\": false\n      },\n      \"details\": {\n        \"label\": \"Print the length of the longest line\",\n        \"description\": \"Command option -L\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"xs: boolean\"\n        ]\n      }\n    }\n  ]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Clone an Application",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Clone an Application: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===(\"wc-\"+environment[\"TEST_DATE\"]+\"-clone-1.0.0\");",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===(\"wc-\"+environment[\"TEST_DATE\"]+\"-clone\");",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"clone\",\n  \"name\": \"wc-{{TEST_DATE}}-clone\",\n  \"version\": \"1.0.0\",\n  \"deploymentPath\": \"{{TEST_DIR_ENCODED}}/apps/wc-1.0.0-copy\",\n  \"deploymentSystem\": \"{{STORAGE_SYSTEM_ID}}\",\n  \"executionSystem\": \"{{COMPUTE_SYSTEM_ID}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Delete the Clone Application",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Delete the Clone Application: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            tests[requestname+\"Checking result is null . . . \"]=result[\"result\"]==null;",
                  "        }",
                  "        else {",
                  "            console.log(requestname+responseBody);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else {",
                  "    console.log(requestname+responseBody);",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}wc-{{TEST_DATE}}-clone-1.0.0",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Check Deleted App returns 404 copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Check Deleted App returns 404: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=(result[\"message\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}wc-{{TEST_DATE}}-clone-1.0.0",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get the Permission ACL for the App",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Get the Permission ACL for the App: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking result contains user . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) tests[requestname+\"Checking result contains user . . . \"]=true;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Add User's Permissions for App",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Add User's Permissions for App: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            if(result[\"status\"]===\"success\"){",
                  "            ",
                  "                tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "                tests[requestname+\"Checking username . . . \"]=result[\"result\"][\"username\"]===environment[\"SHARE_USERNAME\"];",
                  "                tests[requestname+\"Checking read permissions . . . \"]=result[\"result\"][\"permission\"][\"read\"]===true;",
                  "                tests[requestname+\"Checking write permissions . . . \"]=result[\"result\"][\"permission\"][\"write\"]===false;",
                  "                tests[requestname+\"Checking execute permissions . . . \"]=result[\"result\"][\"permission\"][\"execute\"]===true;",
                  "            ",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/pems/",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\":\"{{SHARE_USERNAME}}\",\n  \"permission\": \"READ_EXECUTE\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Check for New User's Permissions in App Permission Listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Check for New User's Permissions in App Permission Listing: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var agaveResponse=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true; ",
                  "        tests[requestname+\"Checking status . . . \"]=agaveResponse.status===\"success\";",
                  "        if(agaveResponse.status===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=agaveResponse.message===null;",
                  "            ",
                  "            var matchingPermissionFound = agaveResponse.result.count(function(pem) {",
                  "                return pem.username===environment[\"SHARE_USERNAME\"] && ",
                  "                       pem.permission.read===true && ",
                  "                       pem.permission.execute===true && ",
                  "                       pem.permission.write===false;",
                  "            });",
                  "            ",
                  "            tests[requestname+\"Checking that new user permission is present . . . \"]=matchingPermissionFound===1;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get new User's App Permissions by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Get new User's App Permissions by Name: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking that result matches username . . . \"]=result[\"result\"].username===environment[\"SHARE_USERNAME\"];",
                  "            tests[requestname+\"Checking that user has read_execute permission . . . \"]=(result[\"result\"].permission.read===true && result[\"result\"].permission.execute===true && result[\"result\"].permission.write===false);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Update a User's Permissions for an App",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Update a User's Permissions for an App: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking username . . . \"]=result[\"result\"][\"username\"]===environment[\"SHARE_USERNAME\"];",
                  "            tests[requestname+\"Checking read permissions . . . \"]=result[\"result\"][\"permission\"][\"read\"]===true;",
                  "            tests[requestname+\"Checking write permissions . . . \"]=result[\"result\"][\"permission\"][\"write\"]===false;",
                  "            tests[requestname+\"Checking execute permissions . . . \"]=result[\"result\"][\"permission\"][\"execute\"]===false;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/pems/{{SHARE_USERNAME}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\":\"{{SHARE_USERNAME}}\",\n  \"permission\": \"READ\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Check for New User's Updated Permissions in App Permission Listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Check for New User's Updated Permissions in App Permission Listing: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var agaveResponse=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=agaveResponse.status===\"success\";",
                  "        if(agaveResponse.status===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=agaveResponse.message===null;",
                  "            ",
                  "            var matchingPermissionFound = agaveResponse.result.count(function(pem) {",
                  "                return pem.username===environment[\"SHARE_USERNAME\"] && ",
                  "                       pem.permission.read===true && ",
                  "                       pem.permission.execute===false && ",
                  "                       pem.permission.write===false;",
                  "            });",
                  "            ",
                  "            tests[requestname+\"Checking that new user permission is present . . . \"]=matchingPermissionFound===1;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get new User's Updated App Permissions by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Get new User's Updated App Permissions by Name: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking that result matches username . . . \"]=result[\"result\"].username===environment[\"SHARE_USERNAME\"];",
                  "            tests[requestname+\"Checking that user has read_execute permission . . . \"]=(result[\"result\"].permission.read===true && result[\"result\"].permission.execute===false && result[\"result\"].permission.write===false);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get a List of Available Applications",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Get a List of Available Applications: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}?publicOnly={{publicOnly}}&privateOnly={{privateOnly}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Disable an app",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Disable an app: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment['APPS_ID'];",
                  "            tests[requestname+\"Checking result is disabled . . . \"]=result[\"result\"][\"available\"]===false;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"disable\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get Details of Disabled App by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Get Details of Disabled App by ID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment[\"APPS_ID\"];",
                  "            tests[requestname+\"Checking result is disabled . . . \"]=result[\"result\"][\"available\"]===false;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Enable an app",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Enable an app: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment['APPS_ID'];",
                  "            tests[requestname+\"Checking result is disabled . . . \"]=result[\"result\"][\"available\"]===true;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"enable\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Get Details of Enabled App by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Get Details of Enabled App by ID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment[\"APPS_ID\"];",
                  "            tests[requestname+\"Checking result is disabled . . . \"]=result[\"result\"][\"available\"]===true;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Delete the Test Application",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Delete the Test Application: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            tests[requestname+\"Checking result is null . . . \"]=result[\"result\"]==null;",
                  "        }",
                  "        else {",
                  "            console.log(requestname+responseBody);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else {",
                  "    console.log(requestname+responseBody);",
                  "}",
                  "postman.setEnvironmentVariable(\"APPS_REVISION_COUNT\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Check Deleted App returns 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Check Deleted App returns 404: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=(result[\"message\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Register New Multipart Upload Application",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Register New Multipart Upload Application: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-mptest-1.00\";",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-mptest\";",
                  "            postman.setEnvironmentVariable(\"_TEMP_MULTIPART_APPS_ID\",result[\"result\"][\"id\"]);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "tmp/data/apps/app.json"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::Delete the Multipart Upload Test Application",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::Delete the Multipart Upload Test Application: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            tests[requestname+\"Checking result is null . . . \"]=result[\"result\"]==null;",
                  "        }",
                  "        else {",
                  "            console.log(requestname+responseBody);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else {",
                  "    console.log(requestname+responseBody);",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{_TEMP_MULTIPART_APPS_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "020 ~ apps cleanup",
      "description": "",
      "item": [
        {
          "name": "apps cleanup::Delete the Test Apps Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps cleanup::Delete the Test Apps Directory: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "apps::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"apps::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "030 _ files setup",
      "description": "",
      "item": [
        {
          "name": "files::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files setup::Create a Working Directory for Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files setup::Create a Working Directory for Tests: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",encodeURI(environment[\"TEST_DIR\"]+\"-files\"));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{TEST_DIR_ENCODED}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files setup::Create a Results Directory for Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files setup::Create a Results Directory for Tests: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "results",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files setup::Create a Subdiretory for Recursive Permissions Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files setup::Create a Subdiretory for Recursive Permissions Tests: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "rperms",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files setup::Stage a File for Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files setup::Stage a File for Tests: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===data[\"fileName\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/compress.data"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files setup::Stage a File for Recursive Permissions Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files setup::Stage a File for Recursive Permissions Tests: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===data[\"fileName\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/compress.data"
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "030 files",
      "description": "",
      "item": [
        {
          "name": "files::Stage a File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Stage a File for Moves: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-2\");",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}-2",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/compress.data"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for File Permissions on Specific System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for File Permissions on Specific System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for File Permissions on Default System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for File Permissions on Default System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/{{TEST_DIR_ENCODED}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Get a Remote Directory Listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Get a Remote Directory Listing: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][0][\"name\"]===\".\";",
                  "            tests[requestname+\"Checking format . . . \"]=result[\"result\"][0][\"format\"]===\"folder\";",
                  "            tests[requestname+\"Checking mimeType . . . \"]=result[\"result\"][0][\"mimeType\"]===\"text/directory\";",
                  "            tests[requestname+\"Checking path single leading slash . . . \"]=result[\"result\"][0][\"path\"].substr(0,2)!==\"//\";",
                  " ",
                  "            var mylink=result[\"result\"][0][\"_links\"][\"self\"][\"href\"];",
                  " ",
                  "            tests[requestname+\"Checking for URL triple slashes . . . \"]=mylink.indexOf(\"///\")===-1;",
                  "        ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}listings/{{TEST_DIR_ENCODED}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Download File from Default Storage",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Download File from Default Storage: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Make a Directory Action",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Make a Directory Action: \";",
                  "",
                  "tests[requestname+\"Result is JSON . . . \"]=true;",
                  "",
                  "if(tests[requestname+\"Result is JSON . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===data[\"filesNewDir\"];",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking path . . . \"]=result[\"result\"][\"path\"]===environment[\"TEST_DIR_ENCODED\"]+\"/\"+data[\"filesNewDir\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"mkdir\",\n    \"path\": \"{{filesNewDir}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Import a File with Complete Form Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Import a File with Complete Form Data: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===data[\"fileName\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_COUNTER\",0);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{filesNewDir}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "urlToIngest",
                  "value": "agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "notifications",
                  "value": "",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileType",
                  "value": "",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Import (JSON) a File with Complete Form Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Import (JSON) a File with Complete Form Data: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-2\");",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{filesNewDir}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fileName\": \"{{fileName}}-2\",\n    \"urlToIngest\": \"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}\",\n    \"notifications\": \"\",\n    \"fileType\": \"\"\n    \n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Import a File with Partial Form Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Import a File with Partial Form Data: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-3\");",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{filesNewDir}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}-3",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "urlToIngest",
                  "value": "agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Import (JSON) a File with Partial Form Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Import (JSON) a File with Partial Form Data: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-4\");",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{filesNewDir}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fileName\": \"{{fileName}}-4\",\n    \"urlToIngest\": \"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for Finished Import Files 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for Finished Stage of File for Operations: \";",
                  "",
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        if(result[\"status\"]===\"success\"){",
                  "            if((environment[\"_TMP_COUNTER\"]<30)&&(result[\"result\"].length>0)&&(result[\"result\"][result[\"result\"].length-1][\"status\"]!==\"TRANSFORMING_COMPLETED\")){",
                  "                ",
                  "                sleepFor(2000);",
                  "                ",
                  "                postman.setEnvironmentVariable(\"_TMP_COUNTER\",environment[\"_TMP_COUNTER\"]+1);",
                  "                postman.setNextRequest(\"files::Check for Finished Import Files 1\");",
                  "            }else{",
                  "                postman.setEnvironmentVariable(\"_TMP_COUNTER\",0);",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}history/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{filesNewDir}}/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for imported file",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for imported file: \";;",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][0][\"name\"]===data[\"fileName\"];",
                  "            tests[requestname+\"Checking path single leading slash . . . \"]=result[\"result\"][0][\"path\"].substr(0,2)!==\"//\";",
                  " ",
                  "  var mylink=result[\"result\"][0][\"_links\"][\"self\"][\"href\"];",
                  " ",
                  " tests[requestname+\"Checking for URL triple slashes . . . \"]=mylink.indexOf(\"///\")===-1;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}listings/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{filesNewDir}}/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Apply Recursive Permission Addition",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Apply Recursive Permission Addition: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{USERNAME}}2\",\n    \"permission\": \"READ\",\n    \"recursive\": true\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Apply Individual File Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Apply Individual File Permission: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"3\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"3\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=!result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms/{{fileName}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{USERNAME}}3\",\n    \"permission\": \"READ\",\n    \"recursive\":true\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Apply Individual Folder Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Apply Individual Folder Permission: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"3\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"3\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{USERNAME}}3\",\n    \"permission\": \"READ\",\n    \"recursive\":true\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for File Permissions on Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for File Permissions on Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for File Permissions on Subdirectory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for File Permissions on Subdirectory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for File Permissions on Subdirectory File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for File Permissions on Subdirectory File: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for Individually Applied File Permissions on Subdirectory File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for Individually Applied File Permissions on Subdirectory File: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"3\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"3\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for Individually Applied Folder Permissions on Subdirectory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for Individually Applied Folder Permissions on Subdirectory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"3\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"3\");",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Apply Recursive Permission Removal",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Apply Recursive Permission Removal: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) index=i;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            tests[requestname+\"Checking result read . . . \"]=!result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=result[\"result\"][index][\"recursive\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{USERNAME}}2\",\n    \"permission\": \"NONE\",\n    \"recursive\": true\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for File Cleared Permissions on Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for File Cleared Permissions on Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking added permission removed . . . \"]=true;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) tests[requestname+\"Checking added permission removed . . . \"]=false;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for Cleared File Permissions on Subdirectory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for Cleared File Permissions on Subdirectory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking added permission removed . . . \"]=true;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) tests[requestname+\"Checking added permission removed . . . \"]=false;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for Cleared File Permissions on Subdirectory File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for Cleared File Permissions on Subdirectory File: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking added permission removed . . . \"]=true;",
                  "            for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) tests[requestname+\"Checking added permission removed . . . \"]=false;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/rperms/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{RESULTS_DIR}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Stage a File for Moves",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Stage a File for Moves: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-mv\");",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_COUNTER\",0);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}-mv",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/compress.data"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for Finished Stage of File for Operations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for Finished Stage of File for Operations: \";",
                  "",
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        if(result[\"status\"]===\"success\"){",
                  "            if((environment[\"_TMP_COUNTER\"]<30)&&(result[\"result\"].length>0)&&(result[\"result\"][result[\"result\"].length-1][\"status\"]!==\"TRANSFORMING_COMPLETED\")){",
                  "                ",
                  "                sleepFor(2000);",
                  "                ",
                  "                postman.setEnvironmentVariable(\"_TMP_COUNTER\",environment[\"_TMP_COUNTER\"]+1);",
                  "                postman.setNextRequest(\"files::Check for Finished Stage of File for Operations\");",
                  "            }else{",
                  "                postman.setEnvironmentVariable(\"_TMP_COUNTER\",0);",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}history/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a File: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-mv-2\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{TEST_DIR_ENCODED}}/{{fileName}}-mv-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a File Back",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a File Back: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-mv\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{TEST_DIR_ENCODED}}/{{fileName}}-mv\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a File Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a File Absolute Path: \";",
                  "",
                  "tests[requestname+\"Result is JSON . . . \"]=true;",
                  "",
                  "if(tests[requestname+\"Result is JSON . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-mv-2\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a File Back Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a File Back Absolute Path: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-mv\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a Directory to Itself",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a Directory to Itself: \";",
                  "",
                  "tests[requestname+\"Checking response code is 400 . . . \"]=responseCode.code===400;",
                  "",
                  "if(!tests[requestname+\"Checking response code is 400 . . . \"]){ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{TEST_DIR_ENCODED}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a Directory to a File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a Directory to a File: \";",
                  "",
                  "tests[requestname+\"Checking response code is 400 . . . \"]=responseCode.code===400;",
                  "",
                  "if(!tests[requestname+\"Checking response code is 400 . . . \"]){ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{TEST_DIR_ENCODED}}/{{fileName}}-mv\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a Directory: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===environment[\"TEST_DIR_ENCODED\"]+\"-2\";",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{TEST_DIR_ENCODED}}-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a Directory Back",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a Directory Back: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===environment[\"TEST_DIR_ENCODED\"];",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{TEST_DIR_ENCODED}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a Directory Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a Directory Absolute Path: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===environment[\"TEST_DIR_ENCODED\"]+\"-2\";",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{HOMEDIR}}/{{TEST_DIR_ENCODED}}-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Move a Directory Back Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Move a Directory Back Absolute Path: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Move success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===environment[\"TEST_DIR_ENCODED\"];",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"move\",\n    \"path\": \"{{HOMEDIR}}/{{TEST_DIR_ENCODED}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Rename a File to Itself",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Rename a File to Itself: \";",
                  "",
                  "tests[requestname+\"Checking response code is 400 . . . \"]=responseCode.code===400;",
                  "",
                  "if(!tests[requestname+\"Checking response code is 400 . . . \"]){ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"rename\",\n    \"path\": \"{{fileName}}-mv\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Rename a File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Rename a File: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Rename success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-mv-2\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"rename\",\n    \"path\": \"{{fileName}}-mv-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Rename a File Back",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Rename a File Back: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Rename success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-mv\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"rename\",\n    \"path\": \"{{fileName}}-mv\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Rename a Directory to Itself",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Rename a Directory to Itself: \";",
                  "",
                  "tests[requestname+\"Checking response code is 400 . . . \"]=responseCode.code===400;",
                  "",
                  "if(!tests[requestname+\"Checking response code is 400 . . . \"]){ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"rename\",\n    \"path\": \"{{TEST_DIR_ENCODED}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Rename a Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Rename a Directory: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Rename success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(environment[\"TEST_DIR_ENCODED\"]+\"-2\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"rename\",\n    \"path\": \"{{TEST_DIR_ENCODED}}-2\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Rename a Directory Back",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Rename a Directory Back: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Rename success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(environment[\"TEST_DIR_ENCODED\"]);",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}-2",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"rename\",\n    \"path\": \"{{TEST_DIR_ENCODED}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Copy a File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Copy a File: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Copy success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-copy\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"copy\",\n    \"path\": \"{{TEST_DIR_ENCODED}}/{{fileName}}-copy\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete a Copied File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete a Copied File: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-copy",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check Copied File Was Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check Copied File Was Deleted: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(!tests[requestname+\"Status code 404 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}listings/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-copy",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Copy a File Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Copy a File Absolute Path: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Copy success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-copy\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"copy\",\n    \"path\": \"{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-copy\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete a Copied File Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete a Copied File Absolute Path: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-copy",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check Copied File Absolute Path Was Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check Copied File Absolute Path Was Deleted Description: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(!tests[requestname+\"Status code 404 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}listings/system/{{STORAGE_SYSTEM_ID}}/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-copy",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Copy a Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Copy a Directory: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Copy success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(environment[\"TEST_DIR_ENCODED\"]+\"-copy\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"copy\",\n    \"path\": \"{{TEST_DIR_ENCODED}}-copy\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete a Copied Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete a Copied Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}-copy",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check Copied File Was Deleted copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check Copied File Was Deleted: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(!tests[requestname+\"Status code 404 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}listings/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}-copy",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Copy a Directory Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Copy a Directory Absolute Path: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Copy success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(environment[\"TEST_DIR_ENCODED\"]+\"-copy\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"copy\",\n    \"path\": \"{{HOMEDIR}}/{{TEST_DIR_ENCODED}}-copy\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete a Copied Directory Absolute Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete a Copied Directory Absolute Path: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}-copy",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check Copied Directory Absolute Path Was Deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check Copied File Absolute Path Was Deleted Description: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(!tests[requestname+\"Status code 404 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}listings/system/{{STORAGE_SYSTEM_ID}}/{{HOMEDIR}}/{{TEST_DIR_ENCODED}}/{{fileName}}-copy",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Stage a File for Character Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Stage a File for Character Tests: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"-base\");",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}-base",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/compress.data"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Check for Finished Stage of File for Special Character Operations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Check for Finished Stage of File for Special Character Operations: \";",
                  "",
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        if(result[\"status\"]===\"success\"){",
                  "            if((environment[\"_TMP_COUNTER\"]<30)&&(result[\"result\"].length>0)&&(result[\"result\"][result[\"result\"].length-1][\"status\"]!==\"TRANSFORMING_COMPLETED\")){",
                  "                ",
                  "                sleepFor(2000);",
                  "                ",
                  "                postman.setEnvironmentVariable(\"_TMP_COUNTER\",environment[\"_TMP_COUNTER\"]+1);",
                  "                postman.setNextRequest(\"files::Check for Finished Stage of File for Special Character Operations\");",
                  "            }else{",
                  "                postman.setEnvironmentVariable(\"_TMP_COUNTER\",0);",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}history/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-base",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Copy a File with Space in Target",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Copy a File with Space in Target: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Copy success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\" base\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}/{{fileName}}-base",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"copy\",\n    \"path\": \"{{TEST_DIR_ENCODED}}/{{fileName}} base\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Download File with Space",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Download File with Space: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}%20base",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Copy a File with Plus in Target",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Copy a File with Plus in Target: \";",
                  "",
                  "tests[requestname+\"Checking response code is 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Checking response code is 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Copy success\";",
                  "            tests[requestname+\"Checking name . . . \"]=result[\"result\"][\"name\"]===(data[\"fileName\"]+\"+base\");",
                  "            tests[requestname+\"Checking owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/{{TEST_DIR_ENCODED}}/{{fileName}}-base",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"copy\",\n    \"path\": \"{{TEST_DIR_ENCODED}}/{{fileName}}+base\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Download File with Plus",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Download File with Plus: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}%2bbase",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Publish file for readonly access",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Publish file for readonly access: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var index=0;",
                  "            for(i=0;i<result[\"result\"].length;i++) {",
                  "                if (result[\"result\"][i][\"username\"]===\"public\") {",
                  "                    index=i;",
                  "                    break;",
                  "                }",
                  "            }",
                  "            ",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][index][\"username\"]===\"public\";",
                  "            tests[requestname+\"Checking result read . . . \"]=result[\"result\"][index][\"permission\"][\"read\"];",
                  "            tests[requestname+\"Checking result write . . . \"]=!result[\"result\"][index][\"permission\"][\"write\"];",
                  "            tests[requestname+\"Checking result execute . . . \"]=!result[\"result\"][index][\"permission\"][\"execute\"];",
                  "            ",
                  "            tests[requestname+\"Checking result recursive . . . \"]=!result[\"result\"][index][\"recursive\"];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}pems/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}%2bbase",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"public\",\n    \"permission\": \"READ\",\n    \"recursive\":false\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Download Public File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Download Public File: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}download/{{USERNAME}}/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}%2bbase",
            "method": "GET",
            "header": [
              {
                "key": "x-forwarded-host",
                "value": "dev.tenants.staging.agaveapi.co",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete a Staged File for Operations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete a Staged File for Operations: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-mv",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete a Staged File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete a Staged File: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}-2",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete the Results Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete the Results Directory: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/results",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::Delete the Temp Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::Delete the Temp Directory: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{filesNewDir}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "030 ~ files cleanup",
      "description": "",
      "item": [
        {
          "name": "files cleanup::Delete Staged Resources",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files cleanup::Delete Staged Resources: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "files::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"files::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "040 _ jobs setup",
      "description": "",
      "item": [
        {
          "name": "jobs::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Create Base Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Create Base Directory: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",encodeURI(environment[\"TEST_DIR\"]+\"-jobs\"));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{TEST_DIR_ENCODED}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Create apps Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Create apps Directory: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "apps",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Create wc-1.00 Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Create wc-1.00 Directory: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "wc-1.00",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Stage wc for Jobs Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Stage wc for Jobs Tests: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "wc",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/wc"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Stage wrapper.sh for Jobs Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Stage wrapper.sh for Jobs Tests: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wrapper.sh\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true,
                  "warning": ""
                },
                {
                  "key": "fileName",
                  "value": "wrapper.sh",
                  "type": "text",
                  "enabled": true,
                  "warning": ""
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "warning": "",
                  "src": "data/wrapper.sh"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Stage wrapper-short.sh for Jobs Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Stage wrapper-short.sh for Jobs Tests: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wrapper-short.sh\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "wrapper-short.sh",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/wrapper-short.sh"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Register and Update wc App for Jobs Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Register and Update wc App for Jobs Tests: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            postman.setEnvironmentVariable(\"APPS_ID\",result[\"result\"][\"id\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"wc-{{TEST_DATE}}-test\",\n  \"parallelism\": \"SERIAL\",\n  \"version\": \"1.00\",\n  \"helpURI\": \"http: //www.gnu.org/s/coreutils/manual/html_node/wc-invocation.html\",\n  \"label\": \"Word Count\",\n  \"shortDescription\": \"Count words in a file\",\n  \"longDescription\": \"\",\n  \"tags\": [\n    \"textutils\",\n    \"gnu\"\n  ],\n  \"ontology\": [\n    \"http: //sswapmeet.sswap.info/algorithms/wc\"\n  ],\n  \"defaultMemory\": 1,\n  \"defaultProcessors\": 1,\n  \"defaultQueue\": \"debug\",\n  \"deploymentPath\": \"{{TEST_DIR_ENCODED}}/apps/wc-1.00\",\n  \"deploymentSystem\": \"{{STORAGE_SYSTEM_ID}}\",\n  \"executionSystem\": \"{{COMPUTE_SYSTEM_ID}}\",\n  \"executionType\": \"CLI\",\n  \"templatePath\": \"wrapper.sh\",\n  \"testPath\": \"wrapper.sh\",\n  \"checkpointable\": false,\n  \"modules\": null,\n  \"inputs\": [\n    {\n      \"id\": \"query1\",\n      \"value\": {\n        \"default\": \"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper.sh\",\n        \"validator\": \"\",\n        \"required\": true,\n        \"visible\": true\n      },\n      \"details\": {\n        \"label\": \"File to count words in: \",\n        \"description\": \"\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"http: //sswapmeet.sswap.info/util/TextDocument\"\n        ],\n        \"minCardinality\": 1,\n        \"maxCardinality\": 1,\n        \"fileTypes\": [\n          \"text-0\"\n        ]\n      }\n    }\n  ],\n  \"parameters\": [\n    {\n      \"id\": \"printLongestLine\",\n      \"value\": {\n        \"type\": \"string\",\n        \"validator\": \"\",\n        \"visible\": true,\n        \"required\": false\n      },\n      \"details\": {\n        \"label\": \"Print the length of the longest line\",\n        \"description\": \"Command option -L\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"xs: boolean\"\n        ]\n      }\n    }\n  ]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs setup::Register and Update wc Short App for Jobs Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs setup::Register and Update wc Short App for Jobs Tests: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-short-1.00\";",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-short\";",
                  "            postman.setEnvironmentVariable(\"APPS_SHORT_ID\",result[\"result\"][\"id\"]);",
                  "            postman.setEnvironmentVariable(\"APPS_SHORT_NAME\",result[\"result\"][\"name\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"wc-{{TEST_DATE}}-test-short\",\n  \"parallelism\": \"SERIAL\",\n  \"version\": \"1.00\",\n  \"helpURI\": \"http: //www.gnu.org/s/coreutils/manual/html_node/wc-invocation.html\",\n  \"label\": \"Word Count\",\n  \"shortDescription\": \"Count words in a file\",\n  \"longDescription\": \"\",\n  \"tags\": [\n    \"textutils\",\n    \"gnu\"\n  ],\n  \"ontology\": [\n    \"http: //sswapmeet.sswap.info/algorithms/wc\"\n  ],\n  \"defaultMemory\": 1,\n  \"defaultProcessors\": 1,\n  \"defaultQueue\": \"debug\",\n  \"deploymentPath\": \"{{TEST_DIR_ENCODED}}/apps/wc-1.00\",\n  \"deploymentSystem\": \"{{STORAGE_SYSTEM_ID}}\",\n  \"executionSystem\": \"{{COMPUTE_SYSTEM_ID}}\",\n  \"executionType\": \"CLI\",\n  \"templatePath\": \"wrapper-short.sh\",\n  \"testPath\": \"wrapper-short.sh\",\n  \"checkpointable\": false,\n  \"modules\": null,\n  \"inputs\": [\n    {\n      \"id\": \"query1\",\n      \"value\": {\n        \"default\": \"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper-short.sh\",\n        \"validator\": \"\",\n        \"required\": true,\n        \"visible\": true\n      },\n      \"details\": {\n        \"label\": \"File to count words in: \",\n        \"description\": \"\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"http: //sswapmeet.sswap.info/util/TextDocument\"\n        ],\n        \"minCardinality\": 1,\n        \"maxCardinality\": 1,\n        \"fileTypes\": [\n          \"text-0\"\n        ]\n      }\n    }\n  ],\n  \"parameters\": [\n    {\n      \"id\": \"printLongestLine\",\n      \"value\": {\n        \"type\": \"string\",\n        \"validator\": \"\",\n        \"visible\": true,\n        \"required\": false\n      },\n      \"details\": {\n        \"label\": \"Print the length of the longest line\",\n        \"description\": \"Command option -L\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"xs: boolean\"\n        ]\n      }\n    }\n  ]\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "040 jobs",
      "description": "",
      "item": [
        {
          "name": "jobs::Get List of Submitted Jobs",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Get List of Submitted Jobs: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs:Submit a New Job Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs:Submit a New Job Request: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            postman.setEnvironmentVariable(\"JOBS_ID\",result[\"result\"][\"id\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\":\"wc-{{TEST_DATE}}-test\",\n  \"appId\":\"wc-{{TEST_DATE}}-test-1.00\",\n  \"memoryPerNode\":1,\n  \"notifications\":[\n    {\n      \"url\":\"{{USER_EMAIL}}\",\n      \"event\":\"FINISHED\"\n    }\n  ],\n  \"inputs\":{\n    \"query1\":\"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper.sh\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Get Details of Job by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::List Details of Restored Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Stop a Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Stop a Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"stop\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Get Job Status and Check Stopped",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Get Job Status and Check Stopped: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result id . . . \"]=result[\"result\"][\"id\"]===environment[\"JOBS_ID\"];",
                  "            tests[requestname+\"Checking result status . . . \"]=result[\"result\"][\"status\"]===\"STOPPED\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/status",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Get Job History",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Get Job History: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is Array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/history",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Find Matching Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Find Matching Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true===true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking response length . . . \"]=result.result.length===1;",
                  "            ",
                  "            tests[requestname+\"Checking stopped job is present . . . \"]=result.result[0].id===environment[\"JOBS_ID\"];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}?id.eq={{JOBS_ID}}&&appId.eq=wc-{{TEST_DATE}}-test-1.00",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs:: Get Job's Permissions ACL",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs:: Get Job's Permissions ACL: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is Array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is Array . . . \"]){",
                  "                tests[requestname+\"Checking result is contains owner . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) tests[requestname+\"Checking result is contains owner . . . \"]=true;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Add/Update User's Permissions for Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Add/Update User's Permissions for Job: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\":\"{{USERNAME}}2\",\n  \"permission\": \"READ\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Get User's Job Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Get User's Job Permissions: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems/{{USERNAME}}2",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Delete User's Job Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Delete User's Job Permissions: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems/{{USERNAME}}2",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Check Deleted User Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Check Deleted User Permissions: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is Array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is Array . . . \"]){",
                  "                tests[requestname+\"Checking result contains deleted user . . . \"]=true;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"username\"]===(environment[\"USERNAME\"]+\"2\")) tests[requestname+\"Checking result contains deleted user . . . \"]=false;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Re-add User's Permissions for Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Re-add User's Permissions for Job: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"][\"username\"]===(environment[\"USERNAME\"]+\"2\");",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\":\"{{USERNAME}}2\",\n  \"permission\": \"READ\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Delete All Job Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Delete All Job Permissions: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Check Deletion of All Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Check Deletion of All Permissions: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is Array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is Array . . . \"]){",
                  "                tests[requestname+\"Checking result has one element . . . \"]=result[\"result\"].length===1;",
                  "                tests[requestname+\"Checking result is contains owner . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) tests[requestname+\"Checking result is contains owner . . . \"]=true;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Search for Job Returns Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Search for Job Returns Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Result is JSON . . . \"]=true===true;",
                  "        ",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "            tests[requestname+\"Checking result has unique result \" + result.result.length + \" . . . \"]=(result.result.length===1);",
                  "            ",
                  "            tests[requestname+\"Checking result has deleted job . . . \"]=result[\"result\"][0].id===environment['JOBS_ID'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}?id.eq={{JOBS_ID}}&visible.eq=true&filter=*",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Delete Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Stop a Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"stop\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Listing Deleted Job Returns 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Listing Deleted Job Returns 404: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "        ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "    ",
                  "        tests[requestname+\"Checking message is not null. . . \"]=result[\"message\"]!==null;",
                  "        ",
                  "        tests[requestname+\"Checking message is not empty. . . \"]=(result[\"message\"].length > 0);",
                  "        ",
                  "        tests[requestname+\"Checking result is array . . . \"]=(!result[\"result\"]);",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Search for Deleted Job Returns Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Search for Deleted Job Returns Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "            tests[requestname+\"Checking result has unique result . . . \"]=result[\"result\"].length===1;",
                  "            ",
                  "            tests[requestname+\"Checking result has deleted job . . . \"]=result[\"result\"][0].id===environment['JOBS_ID'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        console.log(requestname+responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}?id.eq={{JOBS_ID}}&visible.eq=false",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Restore Deleted Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Restore Deleted Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "            tests[requestname+\"Checking result id . . . \"]=result[\"result\"][\"id\"]===environment[\"JOBS_ID\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// pause a moment. commit seems to take a moment",
                  "",
                  "var now = new Date().getTime();",
                  "while(new Date().getTime() < now + 1000){ /* do nothing */ } "
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "action",
                  "value": "restore",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::List Details of Restored Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Get Details of Restored Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Delete Job a Second Time",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Delete Job a Second Time: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"JOBS_ID\",null);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"stop\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs:Submit a New Short Job Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs:Submit a New Short Job Request: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-short\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-short-1.00\";",
                  "            postman.setEnvironmentVariable(\"JOBS_SHORT_ID\",result[\"result\"][\"id\"]);",
                  "            postman.setEnvironmentVariable(\"JOBS_SHORT_NAME\",result[\"result\"][\"name\"]);",
                  "            postman.setEnvironmentVariable(\"_TMP_JOBS_COUNTER\",0);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\":\"wc-{{TEST_DATE}}-test-short\",\n  \"appId\":\"wc-{{TEST_DATE}}-test-short-1.00\",\n  \"memoryPerNode\":1,\n  \"archive\":true,\n  \"archiveSystem\":\"{{STORAGE_SYSTEM_ID}}\",\n  \"archivePath\":\"{{USERNAME}}\",\n  \"notifications\":[\n    {\n      \"url\":\"{{USER_EMAIL}}\",\n      \"event\":\"FINISHED\",\n      \"policy\":{\n          \"retryStrategy\":\"NONE\",\n          \"saveOnFailure\":true\n      }\n    }\n  ],\n  \"inputs\":{\n    \"query1\":\"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper-short.sh\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Wait for Short Job to Start Running",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Wait for Short Job to Start Running: \";",
                  "console.log(requestname+responseBody);",
                  "//tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "function hasStatus(jobEvents, jobStatus) {",
                  "    for (var i=0;i<jobEvents.length;i++) {",
                  "        if (jobEvents[i].status===jobStatus) {",
                  "            return true;",
                  "        } ",
                  "    }",
                  "    return false;",
                  "}",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        //tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        //tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            //tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            //tests[requestname+\"Checking result is Array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            var runningJobState = false;",
                  "            if ( environment[\"_TMP_JOBS_COUNTER\"] < 5 ) {",
                  "                // results given, check for a running state at the end of the job history",
                  "                var job = result['result'];",
                  "                if (job.status===\"RUNNING\") {",
                  "                    console.log(\"Job \" + environment['JOBS_SHORT_ID'] + \" running state detected\");",
                  "                    postman.setEnvironmentVariable(\"_TMP_JOBS_COUNTER\",environment[\"_TMP_JOBS_COUNTER\"]+1);",
                  "                    tests[requestname+\"Detected short job started running . . . \"]=true;",
                  "                    postman.setNextRequest(\"jobs::List Running Short Job Results\");",
                  "                }",
                  "                else if (job.status===\"FINISHED\" || ",
                  "                         job.status===\"FAILED\" || ",
                  "                         job.status===\"STOPPED\" || ",
                  "                         job.status===\"PAUSED\" || ",
                  "                         job.status===\"CLEANING_UP\" || ",
                  "                         job.status===\"ARCHIVING\" || ",
                  "                         job.status===\"ARCHIVING_FAILED\" ) {",
                  "                    console.log(\"Job \" + environment['JOBS_SHORT_ID'] + \" completion detected before running state\");",
                  "                    tests[requestname+\"Detected short job started running . . . \"]=false;",
                  "                    tests[requestname+\"Download running short job results . . . \"]=false;",
                  "                    postman.setNextRequest(\"jobs::List Archived Short Job Results\");",
                  "                }",
                  "                else {",
                  "                    sleepFor(1000);",
                  "                    ",
                  "                    postman.setNextRequest(\"jobs::Wait for Short Job to Start Running\");",
                  "                }",
                  "            }",
                  "            // we've exceeded our retry limit",
                  "            else {",
                  "                console.log(\"Exceeded max iterations waiting for job \" + environment['JOBS_SHORT_ID'] + \" to start running.\")",
                  "                tests[requestname+\"Download running short job results . . . \"]=false;",
                  "                tests[requestname+\"Download archived short job results . . . \"]=false;",
                  "                ",
                  "                postman.setNextRequest(\"jobs::Stop Short job\");",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}?filter=id,status",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::List Running Short Job Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::List Running Short Job Results: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            console.log(requestname+responseBody);",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result is not empty . . . \"]=(result[\"result\"].length > 0);",
                  "            var fileItem = result[\"result\"][0];",
                  "            tests[requestname+\"Checking name . . . \"]=fileItem.name==='.agave.archive';",
                  "            if (tests[requestname+\"Checking name . . . \"]) {",
                  "                tests[requestname+\"Checking type . . . \"]=fileItem.type===\"file\";",
                  "                tests[requestname+\"Checking mimeType . . . \"]=fileItem.mimeType===\"application/octet-stream\";",
                  "                tests[requestname+\"Checking path single leading slash . . . \"]=fileItem.path.substr(0,2)!==\"//\";",
                  "                tests[requestname+\"Checking for URL triple slashes . . . \"]=fileItem._links.self.href.indexOf(\"///\")===-1;",
                  "            }",
                  "        }",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}/outputs/listings/.agave.archive",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{TENANT_BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}me",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Check the existence of the job outputs while running"
          },
          "response": []
        },
        {
          "name": "jobs::Download Running Short Job Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Download Running Short Job Results: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    var hasContentLengthHeader = (postman.getResponseHeader(\"Content-length\") !== ",
                  "'undefined' && postman.getResponseHeader(\"Content-length\") !== null);",
                  "",
                  "    tests[requestname+\"Checking content-length header present . . . \"]=hasContentLengthHeader;",
                  "    ",
                  "    if (hasContentLengthHeader) {",
                  "        ",
                  "        console.log(requestname+postman.getResponseHeader(\"Content-length\")+\":\"+responseBody);",
                  "        ",
                  "        // tests[requestname+\"Checking content-length header non-zero . . . \"]=(postman.getResponseHeader(\"Content-length\")>0);",
                  "    }",
                  "    ",
                  "    tests[requestname+\"Checking response body non-null . . . \"]=(responseBody);",
                  "    tests[requestname+\"Checking response body non-zero . . . \"]=(responseBody.length > 0);",
                  "",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_JOBS_COUNTER\",0);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}/outputs/media/.agave.archive",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{TENANT_BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}me",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Download the job outputs while running"
          },
          "response": []
        },
        {
          "name": "jobs::Wait for Short Job to Finish Archiving",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Wait for Short Job to Finish Archiving: \";",
                  "console.log(requestname+responseBody);",
                  "//tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "function hasStatus(jobEvents, jobStatus) {",
                  "    for (var i=0;i<jobEvents.length;i++) {",
                  "        if (jobEvents[i].status===jobStatus) {",
                  "            return true;",
                  "        } ",
                  "    }",
                  "    return false;",
                  "}",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        //tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        //tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            //tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            //tests[requestname+\"Checking result is Array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            var runningJobState = false;",
                  "            if ( environment[\"_TMP_JOBS_COUNTER\"] < 5 ) {",
                  "                // results given, check for a running state at the end of the job history",
                  "                if (result[\"result\"].length > 0) {",
                  "                    var job = result[\"result\"];",
                  "                    ",
                  "                    if (job.status===\"FINISHED\" || ",
                  "                            job.status===\"ARCHIVING_COMPLETE\") {",
                  "                        console.log(\"Job \" + environment['JOBS_SHORT_ID'] + \" finished state detected\");",
                  "                        postman.setEnvironmentVariable(\"_TMP_JOBS_COUNTER\",environment[\"_TMP_JOBS_COUNTER\"]+1);",
                  "                        tests[requestname+\"Detected short job finished archiving . . . \"]=true;",
                  "                        postman.setNextRequest(\"jobs::List Archived Short Job Results\");",
                  "                    }",
                  "                    else if (job.status===\"RUNNING\" || ",
                  "                             job.status===\"CLEANING_UP\" ||",
                  "                             job.status===\"ARCHIVING_FAILED\" ) {",
                  "                        sleepFor(1000);",
                  "                        ",
                  "                        postman.setNextRequest(\"jobs::Wait for Short Job to Finish Archiving\");",
                  "                    }",
                  "                    else {",
                  "                        console.log(\"Job \" + environment['JOBS_SHORT_ID'] + \" completion detected before running state\");",
                  "                        tests[requestname+\"Detected short job finished archiving . . . \"]=false;",
                  "                        tests[requestname+\"Download archived short job results . . . \"]=false;",
                  "                        postman.setNextRequest(\"jobs::Delete Short Job\");",
                  "                        ",
                  "                        ",
                  "                    }",
                  "                }",
                  "            }",
                  "            // we've exceeded our retry limit",
                  "            else {",
                  "                console.log(\"Exceeded max iterations waiting for job \" + environment['JOBS_SHORT_ID'] + \" to start running.\")",
                  "                tests[requestname+\"Download running short job results . . . \"]=false;",
                  "                tests[requestname+\"Download archived short job results . . . \"]=false;",
                  "                ",
                  "                postman.setNextRequest(\"jobs::Stop Short job\");",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}?filter=id,status",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::List Archived Short Job Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::List Archived Short Job Results: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result is not empty . . . \"]=(result[\"result\"].length > 0);",
                  "            var fileItem = result[\"result\"][0];",
                  "            tests[requestname+\"Checking name . . . \"]=fileItem.name==='.agave.archive';",
                  "            if (tests[requestname+\"Checking name . . . \"]) {",
                  "                tests[requestname+\"Checking type . . . \"]=fileItem.type===\"file\";",
                  "                tests[requestname+\"Checking mimeType . . . \"]=fileItem.mimeType===\"application/octet-stream\";",
                  "                tests[requestname+\"Checking path single leading slash . . . \"]=fileItem.path.substr(0,2)!==\"//\";",
                  "                tests[requestname+\"Checking for URL triple slashes . . . \"]=fileItem._links.self.href.indexOf(\"///\")===-1;",
                  "            }",
                  "        }",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}/outputs/listings/.agave.archive",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{TENANT_BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}me",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Check the existence of the job outputs after archiving"
          },
          "response": []
        },
        {
          "name": "jobs::Download Archived Short Job Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Download Archived Short Job Results: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    var hasContentLengthHeader = (postman.getResponseHeader(\"Content-length\") !== ",
                  "'undefined' && postman.getResponseHeader(\"Content-length\") !== null);",
                  "",
                  "    tests[requestname+\"Checking content-length header present . . . \"]=hasContentLengthHeader;",
                  "    ",
                  "    if (hasContentLengthHeader) {",
                  "        ",
                  "        console.log(requestname+postman.getResponseHeader(\"Content-length\")+\":\"+responseBody);",
                  "        ",
                  "        // tests[requestname+\"Checking content-length header non-zero . . . \"]=(postman.getResponseHeader(\"Content-length\")>0);",
                  "    }",
                  "    ",
                  "    tests[requestname+\"Checking response body non-null . . . \"]=(responseBody);",
                  "    tests[requestname+\"Checking response body non-zero . . . \"]=(responseBody.length > 0);",
                  "",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_JOBS_COUNTER\",0);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}/outputs/media/.agave.archive",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{TENANT_BASEURL}}/{{PROFILES_SERVICE}}/{{PROFILES_VERSION}}me",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Download the job outputs after archiving"
          },
          "response": []
        },
        {
          "name": "jobs::Stop Short Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Stop Short Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"stop\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Delete Short Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Delete Short Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_SHORT_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Updated Execution System With Null startupScript",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"Create an Execution System: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try",
                  "    {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===environment[\"COMPUTE_SYSTEM_ID\"];",
                  "            postman.setEnvironmentVariable(\"COMPUTE_SYSTEM_UUID\",result[\"result\"][\"uuid\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "}  ",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"{{COMPUTE_SYSTEM_ID}}\",\n  \"name\": \"System Sandbox Configured as Execution System\",\n  \"status\": \"UP\",\n  \"type\": \"EXECUTION\",\n    \"description\": \"Testing Execution System\",\n  \"site\": \"agaveapi.co\",\n  \"executionType\": \"CLI\",\n    \"scratchDir\": null,\n    \"workDir\": null,\n   \"queues\": [\n     {\n       \"name\": \"debug\",\n       \"maxJobs\": 100,\n       \"maxUserJobs\": 10,\n       \"maxNodes\": 128,\n       \"maxMemoryPerNode\": \"2GB\",\n       \"maxProcessorsPerNode\": 128,\n       \"maxRequestedTime\": \"24:00:00\",\n       \"customDirectives\": \"\",\n       \"default\": true\n     }\n   ],\n   \"login\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\": \"SSH\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\":\"SSHKEYS\"\n      }\n   },\n   \"storage\":{\n      \"host\":\"{{testSystem}}\",\n      \"port\":{{systemPort}},\n      \"protocol\":\"SFTP\",\n      \"rootDir\":\"/\",\n      \"homeDir\":\"{{systemhomedir}}\",\n      \"auth\":{\n         \"username\":\"{{systemusername}}\",\n         \"publicKey\": \"{{publicKey}}\",\n         \"privateKey\": \"{{privateKey}}\",\n         \"type\":\"SSHKEYS\"\n      }\n   },\n   \"maxSystemJobs\": 100,\n   \"maxSystemJobsPerUser\": 10,\n   \"scheduler\": \"FORK\",\n   \"environment\": \"\",\n   \"startupScript\": null\n}\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs:Submit a New Job to System with null startupScript",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs:Submit a New Job to System with null startupScript: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-startupScript\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-short-1.00\";",
                  "            postman.setEnvironmentVariable(\"JOBS_NULL_STARTUPSCRIPT_ID\",result[\"result\"][\"id\"]);",
                  "            postman.setEnvironmentVariable(\"JOBS_NULL_STARTUPSCRIPT_NAME\",result[\"result\"][\"name\"]);",
                  "            postman.setEnvironmentVariable(\"_TMP_JOBS_COUNTER\",0);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\":\"wc-{{TEST_DATE}}-test-startupScript\",\n  \"appId\":\"wc-{{TEST_DATE}}-test-short-1.00\",\n  \"memoryPerNode\":1,\n  \"archive\":true,\n  \"archiveSystem\":\"{{STORAGE_SYSTEM_ID}}\",\n  \"archivePath\":\"{{USERNAME}}\",\n  \"notifications\":[\n    {\n      \"url\":\"{{USER_EMAIL}}\",\n      \"event\":\"FINISHED\",\n      \"policy\":{\n          \"retryStrategy\":\"NONE\",\n          \"saveOnFailure\":true\n      }\n    }\n  ],\n  \"inputs\":{\n    \"query1\":\"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper-short.sh\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Wait for null StartupScript Job to Start Running",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Wait for null StartupScript Job to Start Running: \";",
                  "console.log(requestname+responseBody);",
                  "//tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "function hasStatus(jobEvents, jobStatus) {",
                  "    for (var i=0;i<jobEvents.length;i++) {",
                  "        if (jobEvents[i].status===jobStatus) {",
                  "            return true;",
                  "        } ",
                  "    }",
                  "    return false;",
                  "}",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        //tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        //tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            //tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            //tests[requestname+\"Checking result is Array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            var runningJobState = false;",
                  "            if ( environment[\"_TMP_JOBS_COUNTER\"] < 5 ) {",
                  "                // results given, check for a running state at the end of the job history",
                  "                var job = result['result'];",
                  "                if (job.status===\"RUNNING\") {",
                  "                    console.log(\"Job \" + environment['JOBS_NULL_STARTUPSCRIPT_ID'] + \" running state detected\");",
                  "                    postman.setEnvironmentVariable(\"_TMP_JOBS_COUNTER\",environment[\"_TMP_JOBS_COUNTER\"]+1);",
                  "                    tests[requestname+\"Detected null startupScript job started running . . . \"]=true;",
                  "                }",
                  "                else if (job.status===\"FINISHED\" || ",
                  "                         job.status===\"FAILED\" || ",
                  "                         job.status===\"STOPPED\" || ",
                  "                         job.status===\"PAUSED\" || ",
                  "                         job.status===\"CLEANING_UP\" || ",
                  "                         job.status===\"ARCHIVING\" || ",
                  "                         job.status===\"ARCHIVING_FAILED\" ) {",
                  "                    console.log(\"Job \" + environment['JOBS_SHORT_ID'] + \" completion detected before running state\");",
                  "                    tests[requestname+\"Detected null startupScript job started running . . . \"]=false;",
                  "                    tests[requestname+\"Download running null startupScript job results . . . \"]=false;",
                  "                }",
                  "                else {",
                  "                    sleepFor(1000);",
                  "                    ",
                  "                    postman.setNextRequest(\"jobs::Wait for null StartupScript Job to Start Running\");",
                  "                }",
                  "            }",
                  "            // we've exceeded our retry limit",
                  "            else {",
                  "                console.log(\"Exceeded max iterations waiting for job \" + environment['JOBS_NULL_STARTUPSCRIPT_ID'] + \" to start running.\")",
                  "                tests[requestname+\"Download running short job results . . . \"]=false;",
                  "                tests[requestname+\"Download archived short job results . . . \"]=false;",
                  "                ",
                  "                postman.setNextRequest(\"jobs::Stop null StartupScript Job\");",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_NULL_STARTUPSCRIPT_ID}}?filter=id,status",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Stop null StartupScript Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Stop null StartupScript Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_NULL_STARTUPSCRIPT_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"stop\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Delete null StartupScript Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Delete null StartupScript Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{JOBS_NULL_STARTUPSCRIPT_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs:Submit a New Multipart Upload Short Job Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs:Submit a New Multipart Upload Short Job Request: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-mptest-short\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-short-1.00\";",
                  "            postman.setEnvironmentVariable(\"_TMP_MULTIPART_UPLOAD_JOB_ID\",result[\"result\"][\"id\"]);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileToUpload",
                  "type": "file",
                  "enabled": true,
                  "src": "tmp/data/jobs/job.json"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::Delete Multipart Upload Short Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::Delete Multipart Upload Short Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{_TMP_MULTIPART_UPLOAD_JOB_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "040 ~ jobs cleanup",
      "description": "",
      "item": [
        {
          "name": "jobs cleanup::Delete the Test Application for Jobs Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs cleanup::Delete the Test Application for Jobs Tests: \";",
                  "",
                  "tests[requestname+\"Status code 20X . . . \"]=responseCode.code===204 || responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 20X . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs cleanup::Delete the Test Short Application for Jobs Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs cleanup::Delete the Test Short Application for Jobs Tests: \";",
                  "",
                  "tests[requestname+\"Status code 20X . . . \"]=responseCode.code===204 || responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 20X . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{APPS_SHORT_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs cleanup::Delete the Testing Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs cleanup::Delete the Testing Directory: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "jobs::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"jobs::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "0401 ~ job matrix",
      "description": "",
      "item": []
    },
    {
      "name": "050 _ notifications setup",
      "description": "",
      "item": [
        {
          "name": "notifications::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications setup::Create Testing Directory for Notifications Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications setup::Create Testing Directory for Notifications Tests: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=((responseCode.code===201)||(responseCode.code===200));",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){}",
                  "        postman.setEnvironmentVariable(\"_TMP_NOTIFICATION_RESOURCE\",result[\"result\"][\"uuid\"]);",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",encodeURI(environment[\"TEST_DIR\"]+\"-notifications\"));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"action\": \"mkdir\", \"path\": \"{{TEST_DIR_ENCODED}}\" }"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "050 notifications",
      "description": "",
      "item": [
        {
          "name": "notifications::Create a Notification on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Create a Notification on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_NOTIFICATION_ID\",result[\"result\"][\"id\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \n  \"url\":\"{{USER_EMAIL}}\",\n  \"event\":\"*\",\n  \"associatedUuid\":\"{{_TMP_NOTIFICATION_RESOURCE}}\",\n  \"persistent\":true\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Retrieve Notification for Specific Resource",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Retrieve Notifications for Specific Resource: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result has only one entry . . . \"]=(result[\"result\"].length == 1);",
                  "            ",
                  "            var notifId = postman.getEnvironmentVariable('_TMP_NOTIFICATION_ID');",
                  "            if (tests[requestname+\"Checking result has only one entry . . . \"]) {",
                  "                tests[requestname+\"Checking id of the single entry matches \" + notifId + \" . . . \"]",
                  "                    =(result[\"result\"][0].id === notifId);",
                  "            }",
                  "            else {",
                  "                console.log(requestname+responseBody);",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}?associatedUuid={{_TMP_NOTIFICATION_RESOURCE}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Retrieve Notification for Specific Resource copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Retrieve Notifications by ID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var notifId = postman.getEnvironmentVariable('_TMP_NOTIFICATION_ID');",
                  "            tests[requestname+\"Checking result id matches \" + notifId + \" . . . \"]",
                  "                =(result[\"result\"].id === notifId);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Update a Notification on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Update a Notification on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var notifId = postman.getEnvironmentVariable('_TMP_NOTIFICATION_ID');",
                  "            tests[requestname+\"Checking result id matches \" + notifId + \" . . . \"]",
                  "                =(result[\"result\"].id === notifId);",
                  "            tests[requestname+\"Checking result is updated . . . \"]=(result[\"result\"].event === 'CONTENT_CHANGED');",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\":\"https://httpbin.org/status/500\",\n    \"event\":\"CONTENT_CHANGED\",\n    \"associatedUuid\":\"{{_TMP_NOTIFICATION_RESOURCE}}\",\n    \"persistent\":true,\n    \"policy\": {\n      \"retryStrategy\": \"none\",\n      \"retryLimit\": 0,\n      \"retryRate\": 0,\n      \"retryDelay\": 0,\n      \"saveOnFailure\": false\n    }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Force a Test Notification on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Force a Test Notification on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            var notifId = postman.getEnvironmentVariable('_TMP_NOTIFICATION_ID');",
                  "            tests[requestname+\"Checking attempt notificiation id is \" + notifId + \". . . \"]=result[\"result\"].notificationId==notifId;",
                  "            tests[requestname+\"Checking attempt result code is 500. . . \"]=result[\"result\"].response.code===500;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}/attempts",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"event\":\"FORCED_EVENT\",\n    \"associatedUuid\":\"{{_TMP_NOTIFICATION_RESOURCE}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Verify Empty Failed Notification Attempts on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Verify Empty Failed Notification Attempts on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking response is array . . . \"]",
                  "                =(result[\"result\"] instanceof Array);",
                  "            ",
                  "            tests[requestname+\"Checking no attempts have been saved . . . \"]=result[\"result\"].length===0;",
                  "            ",
                  "            if (!tests[requestname+\"Checking no attempts have been saved . . . \"]) {",
                  "                console.log(requestname+responseBody);",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}/attempts",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\":\"{{USER_EMAIL}}\",\n    \"event\":\"*\",\n    \"associatedUuid\":\"{{_TMP_NOTIFICATION_RESOURCE}}\",\n    \"persistent\":true,\n    \"status\": \"active\",\n    \"policy\": {\n      \"retryStrategy\": \"immediate\",\n      \"retryLimit\": 20,\n      \"retryRate\": 5,\n      \"retryDelay\": 0,\n      \"saveOnFailure\": true\n    }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Update a Notification Policy on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Update a Notification Policy on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result id . . . \"]=result[\"result\"].id==postman.getEnvironmentVariable('_TMP_NOTIFICATION_ID');",
                  "            tests[requestname+\"Checking result retry strategy . . . \"]=result[\"result\"].policy.retryStrategy==='none';",
                  "            tests[requestname+\"Checking result retry attempts . . . \"]=result[\"result\"].policy.retryRate===0;",
                  "            tests[requestname+\"Checking result retry delay . . . \"]=result[\"result\"].policy.retryDelay===0;",
                  "            tests[requestname+\"Checking result retry limit . . . \"]=result[\"result\"].policy.retryLimit===0;",
                  "            tests[requestname+\"Checking result retry strategy . . . \"]=result[\"result\"].policy.saveOnFailure;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\":\"https://httpbin.org/status/500\",\n    \"event\":\"CONTENT_CHANGED\",\n    \"associatedUuid\":\"{{_TMP_NOTIFICATION_RESOURCE}}\",\n    \"persistent\":false,\n    \"policy\": {\n      \"retryStrategy\": \"none\",\n      \"retryLimit\": 0,\n      \"retryRate\": 0,\n      \"retryDelay\": 0,\n      \"saveOnFailure\": true\n    }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Force a Test Notification on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Force a Test Notification on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result id . . . \"]=result[\"result\"].notificationId==postman.getEnvironmentVariable('_TMP_NOTIFICATION_ID');",
                  "            tests[requestname+\"Checking result attempt result code . . . \"]=result[\"result\"].response.code===500;",
                  "            // save the attempt id to verify the query is working as well",
                  "            postman.setEnvironmentVariable('_TMP_NOTIFICATION_ATTEMPT_ID', result[\"result\"].id);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}/attempts",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"event\":\"FORCED_EVENT\",\n    \"associatedUuid\":\"{{_TMP_NOTIFICATION_RESOURCE}}\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Check Failed Notification Attempt on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Check Failed Notification Attempt on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking response is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "            tests[requestname+\"Checking response size . . . \"]=result[\"result\"].length===1;",
                  "            ",
                  "            if (tests[requestname+\"Checking response size . . . \"]) {",
                  "                tests[requestname+\"Checking attempt notification id . . . \"]=result[\"result\"][0].id==postman.getEnvironmentVariable('_TMP_NOTIFICATION_ATTEMPT_ID');",
                  "                ",
                  "                tests[requestname+\"Checking attempt result . . . \"]=result[\"result\"][0].response.code===500;",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"+e]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}/attempts",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\":\"{{USER_EMAIL}}\",\n    \"event\":\"*\",\n    \"associatedUuid\":\"{{_TMP_NOTIFICATION_RESOURCE}}\",\n    \"persistent\":true,\n    \"status\": \"active\",\n    \"policy\": {\n      \"retryStrategy\": \"immediate\",\n      \"retryLimit\": 20,\n      \"retryRate\": 5,\n      \"retryDelay\": 0,\n      \"saveOnFailure\": true\n    }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Delete notification on Test Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Delete notification on Test Directory: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is empty . . . \"]=result[\"result\"] == null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is null . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::Check notification was deleted",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::Check notification was deleted: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(!tests[requestname+\"Status code 404 . . . \"]){ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "050 ~ notifications cleanup",
      "description": "",
      "item": [
        {
          "name": "notifications cleanup::Delete the Notifications Testing Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications cleanup::Delete the Notifications Testing Directory: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "notifications::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"notifications::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "060 _meta setup",
      "description": "",
      "item": [
        {
          "name": "meta::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining metadata service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "060 meta",
      "description": "",
      "item": [
        {
          "name": "meta::List Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::List Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            //tests[requestname+\"Checking length is zero . . . \"]=(result[\"result\"].length===0);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data?q={{q1}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Search Metadata for unmatched items",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Search Metadata for unmatched items: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            //tests[requestname+\"Checking result array is empty . . . \"]=(result[\"result\"].length===0);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data?q={{q1}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add New Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add New Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"testmetadata\";",
                  "            tests[requestname+\"Checking result value species . . . \"]=result[\"result\"][\"value\"][\"properties\"][\"species\"]===\"arabidopsis\";",
                  "            tests[requestname+\"Checking result value description . . . \"]=result[\"result\"][\"value\"][\"properties\"][\"description\"]===\"A model organism...\";",
                  "            postman.setEnvironmentVariable(\"META_UUID\",result[\"result\"][\"uuid\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"testmetadata\",\n    \"value\": {\"title\": \"Example Metadata\", \"properties\": {\"species\": \"arabidopsis\", \"description\": \"A model organism...\"}},\n    \"schemaId\": null,\n    \"associatedIds\": []\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Added Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Added Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            var metadataItem = result[\"result\"];",
                  "            tests[requestname+\"Checking result uuid . . . \"]=metadataItem.uuid===environment[\"META_UUID\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=metadataItem.owner===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result name . . . \"]=metadataItem.name===\"testmetadata\";",
                  "            tests[requestname+\"Checking result value species . . . \"]=metadataItem.value.properties.species===\"arabidopsis\";",
                  "            tests[requestname+\"Checking result value description . . . \"]=metadataItem.value.properties.description===\"A model organism...\";",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::List Metadata Includes Added Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::List Metadata Includes Added Item: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking added uuid is in response . . . \"]=false",
                  "            for(var i=0; i<result[\"result\"].length; i++) {",
                  "                var metadataItem = result[\"result\"][i];",
                  "                if (metadataItem.uuid===environment[\"META_UUID\"]) {",
                  "                    tests[requestname+\"Checking added uuid is in response . . . \"]=true",
                  "                    tests[requestname+\"Checking result owner . . . \"]=metadataItem.owner===environment[\"USERNAME\"];",
                  "                    tests[requestname+\"Checking result name . . . \"]=metadataItem.name===\"testmetadata\";",
                  "                    tests[requestname+\"Checking result value species . . . \"]=metadataItem.value.properties.species===\"arabidopsis\";",
                  "                    tests[requestname+\"Checking result value description . . . \"]=metadataItem.value.properties.description===\"A model organism...\";",
                  "                    break;",
                  "                }",
                  "            }",
                  "            ",
                  "            if ( ! tests[requestname+\"Checking added uuid is in response . . . \"] ) {",
                  "                console.log(requestname+responseBody);",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data?q={{q1}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Update Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Update Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Result is JSON . . . \"]=(1===1);",
                  "        ",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            var metadataItem = result[\"result\"];",
                  "            tests[requestname+\"Checking result uuid . . . \"]=metadataItem.uuid===environment[\"META_UUID\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=metadataItem.owner===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result name . . . \"]=metadataItem.name===\"testmetadata\";",
                  "            tests[requestname+\"Checking result value species . . . \"]=metadataItem.value.properties.species===\"arabidopsis\";",
                  "            tests[requestname+\"Checking result value description . . . \"]=metadataItem.value.properties.description===\"A revised model organism...\";",
                  "        }",
                  "        ",
                  "    } catch(e) {",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"testmetadata\",\n    \"value\": {\"title\": \"Example Metadata\", \"properties\": {\"species\": \"arabidopsis\", \"description\": \"A revised model organism...\"}},\n    \"schemaId\": null,\n    \"associatedIds\": []\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Updated Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Added Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            var metadataItem = result[\"result\"];",
                  "            tests[requestname+\"Checking result uuid . . . \"]=metadataItem.uuid===environment[\"META_UUID\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=metadataItem.owner===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result name . . . \"]=metadataItem.name===\"testmetadata\";",
                  "            tests[requestname+\"Checking result value species . . . \"]=metadataItem.value.properties.species===\"arabidopsis\";",
                  "            tests[requestname+\"Checking result value description . . . \"]=metadataItem.value.properties.description===\"A revised model organism...\";",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Get Permission ACL for Metadatum",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Get Permission ACL for Metadatum: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result has length 1 . . . \"]=(result[\"result\"].length===1);",
                  "            ",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                // set test to false and update to true if found. Saves a variable",
                  "                // and allows the test order to remain in a logical order.",
                  "                tests[requestname+\"Checking owner permission appears in results . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) {",
                  "                    if (result[\"result\"][i][\"username\"]===environment[\"USERNAME\"]) { ",
                  "                        foundOwnerPermission = true;",
                  "                        tests[requestname+\"Checking owner permission appears in results . . . \"]=true;",
                  "                        tests[requestname+\"Checking contains read permissions for user \"+environment[\"username\"]+\" . . . \"]=result[\"result\"][i][\"permission\"][\"read\"];",
                  "                        tests[requestname+\"Checking contains read permissions for user \"+environment[\"username\"]+\" . . . \"]=result[\"result\"][i][\"permission\"][\"write\"];",
                  "                        break;",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add User Permission to Metadatum",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add User Permission to Metadatum: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "                ",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"].username===shareUser;",
                  "            tests[requestname+\"Checking result permission. . . \"]=result[\"result\"].permission.read;",
                  "            tests[requestname+\"Checking result permission. . . \"]=!result[\"result\"].permission.write;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"permission\": \"READ\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Permission ACL for Added User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Permission ACL for Added User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result length is 2 . . . \"]=(result[\"result\"].length===2);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                var shareUser = environment[\"SHARE_USERNAME\"];",
                  "                ",
                  "                var matches = result[\"result\"].find(function(pem) {",
                  "                    return (pem.username == shareUser);",
                  "                });",
                  "                ",
                  "                tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=(matches);",
                  "                ",
                  "                tests[requestname+\"Checking result contains exactly one permissions for user \"+shareUser+\" . . . \"]=(matches instanceof Object);",
                  "                ",
                  "                tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=matches.permission.read;",
                  "                tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!matches.permission.write;",
                  "                ",
                  "                // for(i=0;i<result[\"result\"].length;i++) {",
                  "                //     if (result[\"result\"][i][\"username\"]===shareUser) {",
                  "                //         var sharePem = result[\"result\"][i];",
                  "                //         tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=true;",
                  "                //         tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "                //         tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "                //     }",
                  "                // }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "        console.log(responseBody)",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Added Permissions by username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Added Permissions by username: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add Write Permission for Additional User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add Write Permission for Additional User: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "                ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            var sharePem = result[\"result\"];",
                  "            tests[requestname+\"Checking result username . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has write permission . . . \"]=sharePem.permission.write;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"permission\": \"READ_WRITE\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Permission Listing Contains Added User Write Permission",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Permission Listing Contains Added User Write Permission: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result length is 2 . . . \"]=(result[\"result\"].length===2);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                var shareUser = environment[\"SHARE_USERNAME\"];",
                  "                ",
                  "                var matches = result[\"result\"].find(function(pem) {",
                  "                    return (pem.username == environment[\"SHARE_USERNAME\"]);",
                  "                });",
                  "                ",
                  "                tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=(matches);",
                  "                ",
                  "                tests[requestname+\"Checking result contains exactly one permissions for user \"+shareUser+\" . . . \"]=(matches instanceof Object);",
                  "                ",
                  "                tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=matches.permission.read;",
                  "                tests[requestname+\"Checking user \"+shareUser+\"has write permission . . . \"]=matches.permission.write;",
                  "            }",
                  "                ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "        console.log(responseBody);",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Added Write Permission by username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Added Write Permission by username: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            tests[requestname+\"Checking result is for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has write permission . . . \"]=sharePem.permission.write;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Delete All User's Permissions for Metadatum",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Delete All User's Permissions for Metadatum: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check ACL for Removed User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check ACL for Removed User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                tests[requestname+\"Checking owner in permission list . . . \"] = ",
                  "                    ! result[\"result\"].none(function(pem) {",
                  "                        return (pem.username == environment[\"USERNAME\"]);",
                  "                    });",
                  "                ",
                  "                // default to true and invalidate if found.",
                  "                tests[requestname+\"Checking does not contain permissions for user \"+environment[\"SHARE_USERNAME\"]+\" . . . \"] = ",
                  "                    result[\"result\"].none(function(pem) {",
                  "                        return (pem.username == environment[\"SHARE_USERNAME\"]);",
                  "                    });",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Re-add Permissions for Another User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Re-add Permissions for Another User: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            ",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            ",
                  "            tests[requestname+\"Checking result is for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"permission\": \"READ\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Permission ACL for ReAdded User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Permission ACL for ReAdded User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result length is 2 . . . \"]=(result[\"result\"].length===2);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                var shareUser = environment[\"SHARE_USERNAME\"];",
                  "                ",
                  "                var matches = result[\"result\"].find(function(pem) {",
                  "                    return (pem.username == shareUser);",
                  "                });",
                  "                ",
                  "                tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=(matches);",
                  "                ",
                  "                tests[requestname+\"Checking result contains exactly one permissions for user \"+shareUser+\" . . . \"]=(matches instanceof Object);",
                  "                ",
                  "                tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=matches.permission.read;",
                  "                tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!matches.permission.write;",
                  "                ",
                  "                // for(i=0;i<result[\"result\"].length;i++) {",
                  "                //     if (result[\"result\"][i][\"username\"]===shareUser) {",
                  "                //         var sharePem = result[\"result\"][i];",
                  "                //         tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=true;",
                  "                //         tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "                //         tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "                //     }",
                  "                // }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "        console.log(responseBody)",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check ReAdded Permissions by username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check ReAdded Permissions by username: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Delete All Metadatum's Permissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Delete All Metadatum's Permissions: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check for Cleared ACL",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check for Cleared ACL: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                tests[requestname+\"Checking owner in permission list . . . \"]=(result[\"result\"][0][\"username\"]===environment[\"USERNAME\"]);",
                  "                ",
                  "                // default to true and invalidate if found.",
                  "                tests[requestname+\"Checking does not contain permissions for user \"+environment[\"SHARE_USERNAME\"]+\" . . . \"]=true;",
                  "                ",
                  "                for(i=0;i<result[\"result\"].length;i++) {",
                  "                    if (result[\"result\"][i][\"username\"]===environment[\"SHARE_USERNAME\"]) {",
                  "                        tests[requestname+\"Checking does not contain permissions for user \"+environment[\"SHARE_USERNAME\"]+\" . . . \"]=false;",
                  "                        break;",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check ACL for Removed User by Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check ACL for Removed User By Username: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Remove Metadatum from System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Remove Metadatum from System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Deleted Metadatum",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Deleted Metadatum: \";",
                  "console.log(requestname+responseBody);",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"No metadata item found for user with id \"+environment[\"META_UUID\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"META_UUID\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{META_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Metadata Schemas",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Metadata Schemas: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            //tests[requestname+\"Checking result array is empty . . . \"]=(result[\"result\"].length===0);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add New Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add New Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result schema title . . . \"]=result[\"result\"][\"schema\"][\"title\"]===\"Test Example Schema\";",
                  "            postman.setEnvironmentVariable(\"META_SCHEMA_UUID\",result[\"result\"][\"uuid\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Example Schema\",\n    \"type\": \"object\",\n    \"properties\": { \"species\": { \"type\": \"string\" } },\n    \"required\": [\"species\"]\n    \n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result uuid . . . \"]=result[\"result\"][\"uuid\"]===environment[\"META_SCHEMA_UUID\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Update Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Update Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result schema title . . . \"]=result[\"result\"][\"schema\"][\"title\"]===\"Test Example Schema Revised\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Example Schema Revised\",\n    \"type\": \"object\",\n    \"properties\": { \"species\": { \"type\": \"string\" } },\n    \"required\": [\"species\"]\n    \n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Revised Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Revised Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result uuid . . . \"]=result[\"result\"][\"uuid\"]===environment[\"META_SCHEMA_UUID\"];",
                  "            tests[requestname+\"Checking result schema title . . . \"]=result[\"result\"][\"schema\"][\"title\"]===\"Test Example Schema Revised\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Get Permission ACL for Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Get Permission ACL for Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                for(i=0;i<result[\"result\"].length;i++) if (result[\"result\"][i][\"username\"]===data[\"username\"]) tests[requestname+\"Checking contains permissions for user \"+data[\"username\"]+\" . . . \"]=result[\"result\"][i][\"permission\"][\"read\"]&&result[\"result\"][i][\"permission\"][\"write\"];",
                  "            ",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add User Permission for Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add User Permission for Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "                ",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result username . . . \"]=result[\"result\"].username===shareUser;",
                  "            tests[requestname+\"Checking result permission. . . \"]=result[\"result\"].permission.read;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"permission\": \"READ\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Permission ACL for Added Metadata Schema User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Permission ACL for Added Metadata Schema User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking result length is 2 . . . \"]=(result[\"result\"].length===2);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "                ",
                  "                for(i=0;i<result[\"result\"].length;i++) {",
                  "                    if (result[\"result\"][i][\"username\"]===shareUser) {",
                  "                        var sharePem = result[\"result\"][i];",
                  "                        tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=true;",
                  "                        tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "                        tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Added Permissions by username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Added Permissions by username: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            ",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            ",
                  "            tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add Metadata Schema Write Permission for Additional User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add Metadata Schema Write Permission for Additional User: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            ",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            ",
                  "            tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has write permission . . . \"]=sharePem.permission.write;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"permission\": \"READ_WRITE\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Added Metadata Schema Write Permission by username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Added Metadata Schema Write Permission by username: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            ",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            ",
                  "            tests[requestname+\"Checking result contains permissions for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has write permission . . . \"]=sharePem.permission.write;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Delete All User's Permissions on Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Delete All User's Permissions on Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems/{{SHARE_USERNAME}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check Metadata Schema Permission ACL for Removed User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check Metadata Schema Permission ACL for Removed User: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                tests[requestname+\"Checking owner in permission list . . . \"]=(result[\"result\"][0][\"username\"]===environment[\"USERNAME\"]);",
                  "                ",
                  "                // default to true and invalidate if found.",
                  "                tests[requestname+\"Checking does not contain permissions for user \"+environment[\"SHARE_USERNAME\"]+\" . . . \"]=true;",
                  "                ",
                  "                for(i=0;i<result[\"result\"].length;i++) {",
                  "                    if (result[\"result\"][i][\"username\"]===environment[\"SHARE_USERNAME\"]) {",
                  "                        tests[requestname+\"Checking does not contain permissions for user \"+environment[\"SHARE_USERNAME\"]+\" . . . \"]=false;",
                  "                        break;",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Re-add Metadata Schema Permissions for Another User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Re-add Metadata Schema Permissions for Another User: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            ",
                  "            var shareUser = data[\"username2\"] || environment[\"SHARE_USERNAME\"];",
                  "            var sharePem = result[\"result\"];",
                  "            ",
                  "            tests[requestname+\"Checking result is for user \"+shareUser+\" . . . \"]=sharePem.username===shareUser;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" has read permission . . . \"]=sharePem.permission.read;",
                  "            tests[requestname+\"Checking user \"+shareUser+\" does not have write permission . . . \"]=!sharePem.permission.write;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{SHARE_USERNAME}}\",\n    \"permission\": \"READ\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Delete All Permission on Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Delete All Permission on Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Check for Cleared Metadata Schema ACL",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Check for Cleared Metadata Schema ACL: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                tests[requestname+\"Checking owner in permission list . . . \"]=(result[\"result\"][0][\"username\"]===environment[\"USERNAME\"]);",
                  "                ",
                  "                // default to true and invalidate if found.",
                  "                tests[requestname+\"Checking does not contain permissions for user \"+environment[\"SHARE_USERNAME\"]+\" . . . \"]=true;",
                  "                ",
                  "                for(i=0;i<result[\"result\"].length;i++) {",
                  "                    if (result[\"result\"][i][\"username\"]===environment[\"SHARE_USERNAME\"]) {",
                  "                        tests[requestname+\"Checking does not contain permissions for user \"+environment[\"SHARE_USERNAME\"]+\" . . . \"]=false;",
                  "                        break;",
                  "                    }",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}/pems",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Remove Metadata Schema from System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Remove Metadata Schema from System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Deleted Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Deleted Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"META_SCHEMA_UUID\",null);",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{META_SCHEMA_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add New Multipart Upload Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add New Multipart Upload Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"testmetadatamp\";",
                  "            tests[requestname+\"Checking result value species . . . \"]=result[\"result\"][\"value\"][\"properties\"][\"species\"]===\"arabidopsis\";",
                  "            tests[requestname+\"Checking result value description . . . \"]=result[\"result\"][\"value\"][\"properties\"][\"description\"]===\"A model organism...\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TEMP_MULTIPART_UPLOAD_META_UUID\",result[\"result\"][\"uuid\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "tmp/data/metadata/meta.json"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Remove Multipart Upload Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Remove Multipart Upload Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TEMP_MULTIPART_UPLOAD_META_UUID\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{_TEMP_MULTIPART_UPLOAD_META_UUID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Add New Multipart Upload Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Add New Multipart Upload Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result schema title . . . \"]=result[\"result\"][\"schema\"][\"title\"]===\"Test Multipart Upload Example Schema\";",
                  "            postman.setEnvironmentVariable(\"_TEMP_MULTIPART_UPLOAD_SCHEMA_UUID\",result[\"result\"][\"uuid\"]);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "tmp/data/metadata/schema.json"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Added Multipart Upload Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Added Multipart Upload Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result uuid . . . \"]=result[\"result\"][\"uuid\"]===environment[\"_TEMP_MULTIPART_UPLOAD_SCHEMA_UUID\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "postman.setEnvironmentVariable(\"META_UUID\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{_TEMP_MULTIPART_UPLOAD_SCHEMA_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Delete Multipart Upload Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Delete Multipart Upload Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{_TEMP_MULTIPART_UPLOAD_SCHEMA_UUID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "meta::Retrieve Deleted Multipart Upload Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::Retrieve Deleted Multipart Upload Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"META_SCHEMA_UUID\",null);",
                  "",
                  "postman.setEnvironmentVariable(\"_TEMP_MULTIPART_UPLOAD_SCHEMA_UUID\",null);",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{_TEMP_MULTIPART_UPLOAD_SCHEMA_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "060 ~ meta cleanup",
      "description": "",
      "item": [
        {
          "name": "meta::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"meta::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "070 _ postits setup",
      "description": "",
      "item": [
        {
          "name": "postits::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits setup::Create Testing Directory for User",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits setup::Create Testing Directory for User: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",encodeURI(environment[\"TEST_DIR\"]+\"-postits\"));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{TEST_DIR_ENCODED}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits setup::Stage a File for Later Use",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits setup::Stage a File for Later Use: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===data[\"fileName\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_LENGTH\",null);",
                  "        postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_TYPE\",null);",
                  "        postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_DATA\",null);",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "type": "file",
                  "enabled": true,
                  "src": "data/compress.data",
                  "value": ""
                },
                {
                  "key": "fileType",
                  "value": "application/octet-stream",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits setup::Check for File Import Finish",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits setup::Check for File Import Finish: \";",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        if(result[\"status\"]===\"success\"){",
                  "            if((result[\"result\"].length>0)&&(result[\"result\"][result[\"result\"].length-1][\"status\"]!==\"TRANSFORMING_COMPLETED\")){",
                  "                postman.setNextRequest(\"postits setup::Check for File Import Finish\");",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}history/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits setup::Get Uploaded File Size and Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits setup::Get Uploaded File Size and Type: \";",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        if(result[\"status\"]===\"success\"){",
                  "            postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_LENGTH\",result[\"result\"][0][\"length\"]);",
                  "            postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_TYPE\",result[\"result\"][0][\"mimeType\"]);",
                  "            postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_URL\",result[\"result\"][0][\"_links\"]['self']['href']);",
                  "            var systemUrl = result[\"result\"][0][\"_links\"]['system']['href'];",
                  "            var systemsListingUrl = systemUrl.substring(0, systemUrl.lastIndexOf('/') );",
                  "            postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_SYSTEM_URL\",systemsListingUrl);",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_PROFILE_URL\",result[\"result\"][0][\"_links\"]['profile']['href']);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}index/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits setup::Download File's Contents",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits setup::Download File's Contents: \";",
                  "",
                  "if(responseCode.code===200){",
                  "    ",
                  "    postman.setEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_DATA\",responseBody);",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "070 postits",
      "description": "Folder for postits",
      "item": [
        {
          "name": "postits::Create a new PostIt of Staged File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Create a new PostIt of Staged File: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking creator . . . \"]=result[\"result\"][\"creator\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking authenticated . . . \"]=result[\"result\"][\"authenticated\"]===true;",
                  "            tests[requestname+\"Checking remainingUses . . . \"]=result[\"result\"][\"remainingUses\"]===2;",
                  "            tests[requestname+\"Checking noauth . . . \"]=result[\"result\"][\"noauth\"]===false;",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment[\"_TMP_POSTITS_DOWNLOAD_FILE_URL\"];",
                  "            tests[requestname+\"Checking method . . . \"]=result[\"result\"][\"method\"]===\"GET\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"POSTITS_NONCE\",result[\"result\"][\"postit\"]);",
                  "            // postman.setEnvironmentVariable(\"POSTITS_URI\",result[\"result\"][\"_links\"][\"self\"][\"href\"]);",
                  "            postman.setEnvironmentVariable(\"POSTITS_URI\",environment['BASEURL'] + '/' + environment['POSTITS_SERVICE'] + '/' + environment['POSTITS_VERSION'] + environment['POSTITS_NONCE']);",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "postman.setEnvironmentVariable(\"POSTITS_URI\",null);",
                  "",
                  "postman.setGlobalVariable(\"AGAVE_AUTH_HEADER\", \"x-jwt-assertion-iplantc-org\");",
                  "",
                  "",
                  "// if (postman.getEnvironmentVariable(\"Authorization\",null) === 'Authorization') {",
                  "//     // postman.setGlobalVariable(\"Authorization\", \"\");",
                  "// } else {",
                  "//     postman.setGlobalVariable(\"Authorization\", \"X-JWT-ASSERTION-IPLANTC-ORG\");",
                  "// }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{_TMP_POSTITS_DOWNLOAD_FILE_URL}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Create a new PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Use Postit for Download",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Use Postit for Download: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    tests[requestname+\"Checking content length . . . \"]=postman.getResponseHeader(\"Content-length\").toString()===postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_LENGTH\").toString();",
                  "    tests[requestname+\"Checking content type . . . \"]=postman.getResponseHeader(\"Content-type\").toLowerCase().startsWith(postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_TYPE\").toLowerCase());",
                  "    tests[requestname+\"Checking contents . . . \"]=responseBody===postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_DATA\");",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the first use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Use Postit for Download with Force",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Use Postit for Download with Force: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    tests[requestname+\"Checking content type . . . \"]=postman.getResponseHeader(\"Content-disposition\").toLowerCase().startsWith(\"attachment\");",
                  "    tests[requestname+\"Checking content length . . . \"]=postman.getResponseHeader(\"Content-length\").toString()===postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_LENGTH\").toString();",
                  "    tests[requestname+\"Checking content type . . . \"]=postman.getResponseHeader(\"Content-type\").toLowerCase().startsWith(postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_TYPE\").toLowerCase());",
                  "    tests[requestname+\"Checking contents . . . \"]=responseBody===postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_DATA\");",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}?force=true",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the first use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Create a New PostIt of Staged File with Force",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Create a New PostIt of Staged File with Force: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking creator . . . \"]=result[\"result\"][\"creator\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking authenticated . . . \"]=result[\"result\"][\"authenticated\"]===true;",
                  "            tests[requestname+\"Checking remainingUses . . . \"]=result[\"result\"][\"remainingUses\"]===1;",
                  "            tests[requestname+\"Checking noauth . . . \"]=result[\"result\"][\"noauth\"]===false;",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment['_TMP_POSTITS_DOWNLOAD_FILE_URL']+\"?force=true\";",
                  "            // tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment[\"BASEURL\"]+\"/\"+environment[\"FILES_SERVICE\"]+\"/\"+environment[\"FILES_VERSION\"]+\"media/system/\"+environment[\"STORAGE_SYSTEM_ID\"]+\"/\"+environment[\"TEST_DIR_ENCODED\"]+\"/\"+data[\"fileName\"]+\"?force=true\";",
                  "            tests[requestname+\"Checking method . . . \"]=result[\"result\"][\"method\"]===\"GET\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"POSTITS_NONCE\",result[\"result\"][\"postit\"]);",
                  "            // postman.setEnvironmentVariable(\"POSTITS_URI\",result[\"result\"][\"_links\"][\"self\"][\"href\"]);",
                  "            postman.setEnvironmentVariable(\"POSTITS_URI\",environment['BASEURL'] + '/' + environment['POSTITS_SERVICE'] + '/' + environment['POSTITS_VERSION'] + environment['POSTITS_NONCE']);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "postman.setEnvironmentVariable(\"POSTITS_URI\",null);",
                  "",
                  "postman.setGlobalVariable(\"AGAVE_AUTH_HEADER\", \"x-jwt-assertion-iplantc-org\");",
                  "",
                  "",
                  "// if (postman.getEnvironmentVariable(\"Authorization\",null) === 'Authorization') {",
                  "//     // postman.setGlobalVariable(\"Authorization\", \"\");",
                  "// } else {",
                  "//     postman.setGlobalVariable(\"Authorization\", \"X-JWT-ASSERTION-IPLANTC-ORG\");",
                  "// }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{_TMP_POSTITS_DOWNLOAD_FILE_URL}}?force=true",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "1",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Create a new PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Use Postit for Download with Builtin Force",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Use Postit for Download with Builtin Force: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    tests[requestname+\"Checking content type . . . \"]=postman.getResponseHeader(\"Content-disposition\").toLowerCase().startsWith(\"attachment\");",
                  "    tests[requestname+\"Checking content length . . . \"]=postman.getResponseHeader(\"Content-length\").toString()===postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_LENGTH\").toString();",
                  "    tests[requestname+\"Checking content type . . . \"]=postman.getResponseHeader(\"Content-type\").toLowerCase().startsWith(postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_TYPE\").toLowerCase());",
                  "    tests[requestname+\"Checking contents . . . \"]=responseBody===postman.getEnvironmentVariable(\"_TMP_POSTITS_DOWNLOAD_FILE_DATA\");",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the first use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Create a New PostIt of Systems Listing",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Create a New PostIt of Systems Listing: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking creator . . . \"]=result[\"result\"][\"creator\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking authenticated . . . \"]=result[\"result\"][\"authenticated\"]===true;",
                  "            tests[requestname+\"Checking remainingUses . . . \"]=result[\"result\"][\"remainingUses\"]===2;",
                  "            tests[requestname+\"Checking noauth . . . \"]=result[\"result\"][\"noauth\"]===false;",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment[\"_TMP_POSTITS_DOWNLOAD_SYSTEM_URL\"];",
                  "            tests[requestname+\"Checking method . . . \"]=result[\"result\"][\"method\"]===\"GET\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"POSTITS_NONCE\",result[\"result\"][\"postit\"]);",
                  "            //postman.setEnvironmentVariable(\"POSTITS_URI\",result[\"result\"][\"_links\"][\"self\"][\"href\"]);",
                  "            postman.setEnvironmentVariable(\"POSTITS_URI\",environment['BASEURL'] + '/' + environment['POSTITS_SERVICE'] + '/' + environment['POSTITS_VERSION'] + environment['POSTITS_NONCE']);",
                  "            ",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "postman.setEnvironmentVariable(\"POSTITS_URI\",null);",
                  "",
                  "postman.setGlobalVariable(\"AGAVE_AUTH_HEADER\", \"x-jwt-assertion-iplantc-org\");",
                  "",
                  "",
                  "// if (postman.getEnvironmentVariable(\"Authorization\",null) === 'Authorization') {",
                  "//     // postman.setGlobalVariable(\"Authorization\", \"\");",
                  "// } else {",
                  "//     postman.setGlobalVariable(\"Authorization\", \"X-JWT-ASSERTION-IPLANTC-ORG\");",
                  "// }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{_TMP_POSTITS_DOWNLOAD_SYSTEM_URL}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Create a new PostIt."
          },
          "response": []
        },
        {
          "name": "postits::List Existing PostIts Including System Listing Postit",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::List Existing PostIts Including System Listing Postit: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking result is Array . . . \"]=Object.getPrototypeOf(result[\"result\"])===Array.prototype;",
                  "            tests[requestname+\"Checking for created postit . . . \"]=false;",
                  "            for(i=0;i<result[\"result\"].length;i++){",
                  "                if(result[\"result\"][i][\"postit\"]===environment[\"POSTITS_NONCE\"]) tests[requestname+\"Checking for created postit . . . \"]=true;",
                  "            }",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": "List PostIts to check for created PostIt."
          },
          "response": []
        },
        {
          "name": "postits::First Use of System Listing PostIt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::First Use of System Listing PostIt: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the first use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Second Use of System Listing PostIt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Second Use of System Listing PostIt: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the second use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Third Use of System Listing PostIt (Failure)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Third Use of System Listing PostIt (Failure): \";",
                  "",
                  "tests[requestname+\"Status code 403 . . . \"]=responseCode.code===403;",
                  "",
                  "if(tests[requestname+\"Status code 403 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Postit key has already been redeemed.\";",
                  "            tests[requestname+\"Checking result . . . \"]=result[\"result\"]===\"\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the third, failing use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Create a New PostIt of Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Create a New PostIt of Profile: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking creator . . . \"]=result[\"result\"][\"creator\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking authenticated . . . \"]=result[\"result\"][\"authenticated\"]===true;",
                  "            tests[requestname+\"Checking remainingUses . . . \"]=result[\"result\"][\"remainingUses\"]===2;",
                  "            tests[requestname+\"Checking noauth . . . \"]=result[\"result\"][\"noauth\"]===false;",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment[\"_TMP_POSTITS_DOWNLOAD_PROFILE_URL\"];",
                  "            // tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment[\"BASEURL\"]+\"/\"+environment[\"PROFILES_SERVICE\"]+\"/\"+environment[\"PROFILES_VERSION\"]+\"me\";",
                  "            tests[requestname+\"Checking method . . . \"]=result[\"result\"][\"method\"]===\"GET\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"POSTITS_NONCE\",result[\"result\"][\"postit\"]);",
                  "            postman.setEnvironmentVariable(\"POSTITS_URI\",result[\"result\"][\"_links\"][\"self\"][\"href\"]);",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "postman.setEnvironmentVariable(\"POSTITS_URI\",null);",
                  "",
                  "postman.setGlobalVariable(\"AGAVE_AUTH_HEADER\", \"x-jwt-assertion-iplantc-org\");",
                  "",
                  "",
                  "// if (postman.getEnvironmentVariable(\"Authorization\",null) === 'Authorization') {",
                  "//     // postman.setGlobalVariable(\"Authorization\", \"\");",
                  "// } else {",
                  "//     postman.setGlobalVariable(\"Authorization\", \"X-JWT-ASSERTION-IPLANTC-ORG\");",
                  "// }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{_TMP_POSTITS_DOWNLOAD_PROFILE_URL}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Create a new PostIt."
          },
          "response": []
        },
        {
          "name": "postits::List Existing PostIts Including Profile Postit",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::List Existing PostIts Including Profile Postit: \";",
                  "",
                  "  tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking result is Array . . . \"]=Object.getPrototypeOf(result[\"result\"])===Array.prototype;",
                  "            tests[requestname+\"Checking for created postit . . . \"]=false;",
                  "            for(i=0;i<result[\"result\"].length;i++){",
                  "                if(result[\"result\"][i][\"postit\"]===environment[\"POSTITS_NONCE\"]) {",
                  "                    tests[requestname+\"Checking for created postit . . . \"]=true;",
                  "                    break;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": "List PostIts to check for created PostIt."
          },
          "response": []
        },
        {
          "name": "postits::First Use of Profile PostIt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::First Use of Profile PostIt: \";",
                  "",
                  "  tests[requestname+\"Status code 503 . . . \"]=responseCode.code===503;",
                  "",
                  "if(responseCode.code === 200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking username . . . \"]=result[\"result\"][\"username\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"_links\"][\"self\"][\"href\"]===environment[\"BASEURL\"]+\"/\"+environment[\"PROFILES_SERVICE\"]+\"/\"+environment[\"PROFILES_VERSION\"]+environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the first use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Second Use of Profile PostIt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Second Use of Profile PostIt: \";",
                  "",
                  "  tests[requestname+\"Status code 503 . . . \"]=responseCode.code===503;",
                  "",
                  "if(responseCode.code === 200){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking username . . . \"]=result[\"result\"][\"username\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"_links\"][\"self\"][\"href\"]===environment[\"BASEURL\"]+\"/\"+environment[\"PROFILES_SERVICE\"]+\"/\"+environment[\"PROFILES_VERSION\"]+environment[\"USERNAME\"];",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the second use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::Third Use of Profile PostIt (Failure)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Third Use of Profile PostIt (Failure): \";",
                  "",
                  "tests[requestname+\"Status code 403 . . . \"]=responseCode.code===403;",
                  "",
                  "if(tests[requestname+\"Status code 403 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"Postit key has already been redeemed.\";",
                  "            tests[requestname+\"Checking result . . . \"]=result[\"result\"]===\"\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{POSTITS_URI}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "Test the third, failing use of the PostIt."
          },
          "response": []
        },
        {
          "name": "postits::List Existing PostIts After Uses",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::List Existing PostIts After Uses: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for created postit . . . \"]=true;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"postit\"]===environment[\"POSTITS_NONCE\"]) tests[requestname+\"Checking for created postit . . . \"]=false;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }finally{",
                  "    ",
                  "        postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "        postman.setEnvironmentVariable(\"POSTITS_URI\",null);",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": "List PostIts to look for a created PostIt after it has been redeemed and should no longer be available."
          },
          "response": []
        },
        {
          "name": "postits::Create a New PostIt for Invalidation",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Create a New PostIt for Invalidation: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking creator . . . \"]=result[\"result\"][\"creator\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking authenticated . . . \"]=result[\"result\"][\"authenticated\"]===true;",
                  "            tests[requestname+\"Checking remainingUses . . . \"]=result[\"result\"][\"remainingUses\"]===2;",
                  "            tests[requestname+\"Checking noauth . . . \"]=result[\"result\"][\"noauth\"]===false;",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment[\"_TMP_POSTITS_DOWNLOAD_SYSTEM_URL\"];",
                  "            tests[requestname+\"Checking method . . . \"]=result[\"result\"][\"method\"]===\"GET\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"POSTITS_NONCE\",result[\"result\"][\"postit\"]);",
                  "            //postman.setEnvironmentVariable(\"POSTITS_URI\",result[\"result\"][\"_links\"][\"self\"][\"href\"]);",
                  "            postman.setEnvironmentVariable(\"POSTITS_URI\",environment['BASEURL'] + '/' + environment['POSTITS_SERVICE'] + '/' + environment['POSTITS_VERSION'] + environment['POSTITS_NONCE']);",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "postman.setEnvironmentVariable(\"POSTITS_URI\",null);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{_TMP_POSTITS_DOWNLOAD_SYSTEM_URL}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Create a new PostIt for Invalidation."
          },
          "response": []
        },
        {
          "name": "postits::List Existing PostIts for Invalidation Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::List Existing PostIts for Invalidation Test: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for created postit . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"_links\"][\"self\"][\"href\"]===environment[\"POSTITS_URI\"]) tests[requestname+\"Checking for created postit . . . \"]=true;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "    ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": "List PostIts to check PostIt created for invalidation."
          },
          "response": []
        },
        {
          "name": "postits::Immediately invalidates PostIt URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::Immediately invalidates PostIt URL: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}{{POSTITS_NONCE}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits::List Existing PostIts After Invalidation",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::List Existing PostIts After Invalidation: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for created postit . . . \"]=true;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i][\"postit\"]===environment[\"POSTITS_NONCE\"]) tests[requestname+\"Checking for created postit . . . \"]=false;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }finally{",
                  "    ",
                  "        postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "        postman.setEnvironmentVariable(\"POSTITS_URI\",null);",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": "List PostIts to look for an Invalidated PostIt."
          },
          "response": []
        },
        {
          "name": "postits::List Existing PostIts Without Authentication",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::List Existing PostIts Without Authentication: \";",
                  "",
                  "tests[requestname+\"Status code 401 . . . \"]=responseCode.code===401;",
                  "",
                  "if(tests[requestname+\"Status code 401 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking code . . . \"]=result[\"fault\"][\"code\"]===900902;",
                  "        tests[requestname+\"Checking message . . . \"]=result[\"fault\"][\"message\"]===\"Missing Credentials\";",
                  "        tests[requestname+\"Checking description . . . \"]=result[\"fault\"][\"description\"]===\"Required OAuth credentials not provided. Make sure your API invocation call has a header: \\\"Authorization: Bearer ACCESS_TOKEN\\\"\";",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "GET",
            "header": [],
            "body": [],
            "description": "List PostIts without authentication."
          },
          "response": []
        }
      ]
    },
    {
      "name": "070 ~ postits cleanup",
      "description": "",
      "item": [
        {
          "name": "postits cleanup::Delete the Staged File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits cleanup::Delete the Staged File: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/{{fileName}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits cleanup::Delete the Testing Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits cleanup::Delete the Testing Directory: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "postits::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"postits::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "080 _ transforms setup",
      "description": "",
      "item": [
        {
          "name": "transforms::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TRANSFORMS_SERVICE}}/{{TRANSFORMS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "transforms setup::Create a Working Directory for Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms setup::Create a Working Directory for Tests: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",encodeURI(environment[\"TEST_DIR\"]+\"-transforms\"));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "{{TEST_DIR_ENCODED}}",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "transforms setup::Create a Results Directory for Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms setup::Create a Results Directory for Tests: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "action",
                  "value": "mkdir",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "path",
                  "value": "results",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "transforms setup::Stage a File for Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms setup::Stage a File for Tests: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===data[\"fileName\"];",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileName",
                  "value": "{{fileName}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "value": "",
                  "type": "file",
                  "enabled": true,
                  "src": "data/compress.data"
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "080 transforms",
      "description": "",
      "item": [
        {
          "name": "transforms::List All Transforms",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms::List All Transforms: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TRANSFORMS_SERVICE}}/{{TRANSFORMS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "transforms::Find All Transforms Matching Given Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms::Find All Transforms Matching Given Name: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            try{",
                  "                tests[requestname+\"Checking for matching result . . . \"]=result[\"result\"][\"name\"]===data[\"transformId\"];",
                  "            }catch(e){",
                  "                tests[requestname+\"Checking for matching result . . . \"]=false;",
                  "                console.log(requestname+e.toString()+responseBody);",
                  "            }",
                  "        ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TRANSFORMS_SERVICE}}/{{TRANSFORMS_VERSION}}{{transformId}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "transforms::Find All Transforms with Given Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms::Find All Transforms with Given Tag: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking for matching tag . . . \"]=true;",
                  "                var transformHasTag=false;",
                  "                for(i=0;i<result[\"result\"].length;i++){",
                  "                    for(j=0;j<result[\"result\"][i][\"tags\"].length;j++) if(result[\"result\"][i][\"tags\"][j][\"name\"]===data[\"tag\"]) transformHasTag=true;",
                  "                    if(!transformHasTag) tests[requestname+\"Checking for matching tag . . . \"]=false;",
                  "                    transformHasTag=false;",
                  "                }",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TRANSFORMS_SERVICE}}/{{TRANSFORMS_VERSION}}?tag={{tag}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "080 ~ transforms cleanup",
      "description": "",
      "item": [
        {
          "name": "transforms cleanup::Delete Staged Resources",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms cleanup::Delete Staged Resources: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  "",
                  "",
                  "if ('transforms setup::Create a Working Directory for Tests' === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('Delete Execution System');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "transforms::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"transforms::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "090 _monitors setup",
      "description": "",
      "item": [
        {
          "name": "monitors::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Start: \";",
                  "",
                  "tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "    console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "    postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Register Multipart Upload Test Compute System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Register Multipart Upload Test Compute System:\";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=(responseCode.code===201||responseCode.code===200);",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try {",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"][\"id\"]===\"postman-test-compute-mp-\"+environment['TEST_DATE'];",
                  "            postman.setEnvironmentVariable('_TEMP_MULTIPART_COMPUTE_SYSTEM_ID', result[\"result\"][\"id\"]);",
                  "            ",
                  "            if (! tests[requestname+\"Checking result ID . . . \"]) {",
                  "                console.log(responseBody);",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileToUpload",
                  "type": "file",
                  "enabled": true,
                  "src": "tmp/data/systems/compute.json"
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "090 monitors",
      "description": "",
      "item": [
        {
          "name": "monitors::Retrieve Monitor for Specific Resource",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Retrieve Monitor for Specific Resource: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}?target={{STORAGE_SYSTEM_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Add New Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Add New Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            postman.setEnvironmentVariable(\"MONITORS_ID\",result[\"result\"][\"id\"]);",
                  "           ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \n  \"active\": true, \n  \"frequency\": 720, \n  \"internalUsername\": null, \n  \"target\": \"{{STORAGE_SYSTEM_ID}}\", \n  \"updateSystemStatus\": false \n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Check for Added Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Check for Added Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking result contains added monitor . . . \"]=false;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"id\"]===environment[\"MONITORS_ID\"]) tests[requestname+\"Checking result contains added monitor . . . \"]=true;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}?target={{STORAGE_SYSTEM_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Retrieve Specific Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Retrieve Specific Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is expected monitor . . . \"]=result[\"result\"][\"id\"]===environment[\"MONITORS_ID\"];",
                  "            tests[requestname+\"Checking result has modified frequency . . . \"]=result[\"result\"][\"frequency\"]===720;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{MONITORS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Update Existing Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Update Existing Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is expected monitor . . . \"]=result[\"result\"][\"id\"]===environment[\"MONITORS_ID\"];",
                  "            tests[requestname+\"Checking result has modified frequency . . . \"]=result[\"result\"][\"frequency\"]==60;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{MONITORS_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \n  \"active\": true, \n  \"frequency\": 60, \n  \"internalUsername\": null, \n  \"target\": \"{{STORAGE_SYSTEM_ID}}\", \n  \"updateSystemStatus\": false \n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Check for Monitor Modification",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Check for Monitor Modification: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is expected monitor . . . \"]=result[\"result\"][\"id\"]===environment[\"MONITORS_ID\"];",
                  "            tests[requestname+\"Checking result has modified frequency . . . \"]=result[\"result\"][\"frequency\"]==60;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{MONITORS_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Force Monitor Check to Run",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Force Monitor Check to Run: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "            postman.setEnvironmentVariable(\"MONITOR_CHECK_ID\",result[\"result\"][\"id\"]);",
                  "            postman.setEnvironmentVariable(\"_TEMP_MONITOR_CHECK_ITERATION\", 0);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "// pause to let the previous check run before the next one runs. ",
                  "sleepFor(2000);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{MONITORS_ID}}/checks",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Retrieve Monitor Checks for Specific Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Retrieve Monitor Checks for Specific Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is not empty . . . \"]=(result[\"result\"].length > 0);",
                  "            ",
                  "            var foundCheck = result.result.none({id: postman.getEnvironmentVariable(\"MONITOR_CHECK_ID\")});",
                  "            var iteration = parseInt(postman.getEnvironmentVariable(\"_TEMP_MONITOR_CHECK_ITERATION\"));",
                  "            ",
                  "            if (foundCheck) {",
                  "                tests[requestname+\"Checking forced monitor check present in result set . . . \"]=true;",
                  "            }",
                  "            else if (iteration < 60) {",
                  "                postman.setNextRequest(\"monitors::Wait for Monitor Check to fire\");",
                  "                postman.setEnvironmentVariable(\"_TEMP_MONITOR_CHECK_ITERATION\", iteration + 1);",
                  "            }",
                  "            else {",
                  "                console.log(\"Maximum number of test intervals exceeded waiting for monitor check to run.\");",
                  "                tests[requestname+\"Checking forced monitor check present in result set . . . \"]=false;",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e+\"\\n\"+responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \" + e]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "// pause to let the previous check run before the next one runs. ",
                  "sleepFor(2000);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{MONITORS_ID}}/checks",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Retrieve Specific Monitor Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Retrieve Specific Monitor Check: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "            tests[requestname+\"Checking monitor check id matches request id . . . \"]=(result[\"result\"][\"id\"]===postman.getEnvironmentVariable(\"MONITOR_CHECK_ID\"))",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{MONITORS_ID}}/checks/{{MONITOR_CHECK_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Delete a Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Delete a Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]==null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{MONITORS_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Check for Removed Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Check for Removed Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                tests[requestname+\"Checking result does not contain added monitor . . . \"]=true;",
                  "                for(i=0;i<result[\"result\"].length;i++) if(result[\"result\"][i][\"id\"]===environment[\"MONITORS_ID\"]) tests[requestname+\"Checking result does not contain added monitor . . . \"]=false;",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"MONITORS_ID\",null);",
                  "postman.setEnvironmentVariable(\"MONITOR_CHECK_ID\",null);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}?target={{STORAGE_SYSTEM_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Add New Multipart Upload Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Add New Multipart Upload Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            postman.setEnvironmentVariable(\"_TEMP_MULTIPART_UPLOAD_MONITOR_UUID\",result[\"result\"][\"id\"]);",
                  "           ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileToUpload",
                  "type": "file",
                  "enabled": true,
                  "src": "tmp/data/monitors/monitor.json"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::Delete the Multipart Upload Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Delete the Multipart Upload Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]==null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TEMP_MULTIPART_UPLOAD_MONITOR_UUID\",null);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{_TEMP_MULTIPART_UPLOAD_MONITOR_UUID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "090 ~ monitors cleanup",
      "description": "",
      "item": [
        {
          "name": "monitors::Delete the Multipart Upload Test Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::Delete the Multipart Upload Test Storage System: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TEMP_MULTIPART_COMPUTE_SYSTEM_ID\",null);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{_TEMP_MULTIPART_COMPUTE_SYSTEM_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "monitors::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"monitors::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "100 _ tags setup",
      "description": "",
      "item": [
        {
          "name": "tags::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::Start: \";",
                  "",
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest('tags setup::List tags');",
                  "    console.log(\"Skipping api registration for backend tests.\")",
                  "}",
                  "else {",
                  "    tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "    if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "        console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "        postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags setup::Subscribe Client to Tags API",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"clients::Subscribe Client to Tags API: \";",
                  "if (environment['SKIP_FRONTEND']) {",
                  "    tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "}",
                  "else {",
                  "    tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "    ",
                  "    if(tests[requestname+\"Status code 200 . . . \"]){",
                  "        ",
                  "        try{",
                  "        ",
                  "            var result=JSON.parse(responseBody);",
                  "            tests[requestname+\"Result is JSON . . . \"]=true;",
                  "            tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "            if(result[\"status\"]===\"success\"){",
                  "                ",
                  "            }",
                  "        ",
                  "        }catch(e){",
                  "        ",
                  "            console.log(requestname+e);",
                  "            tests[requestname+\"Result is JSON . . . \"]=false;",
                  "        ",
                  "        }",
                  "        ",
                  "    }else{ console.log(requestname+responseBody); }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}/subscriptions",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "description": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "apiName",
                  "value": "Tags",
                  "type": "text",
                  "enabled": true,
                  "warning": ""
                },
                {
                  "key": "apiVersion",
                  "value": "v2",
                  "type": "text",
                  "enabled": true,
                  "warning": ""
                },
                {
                  "key": "apiProvider",
                  "value": "admin",
                  "type": "text",
                  "enabled": true,
                  "warning": ""
                },
                {
                  "key": "tier",
                  "value": "Unlimited",
                  "type": "text",
                  "enabled": true,
                  "warning": ""
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags setup::Generate an Access Token After Tags API Subscription",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags setup::Generate an Access Token After Tags API Subscription: \";",
                  "",
                  "function firstcap(astring){",
                  "    return astring.substr(0,1).toUpperCase()+astring.substr(1);",
                  "}",
                  "",
                  "if (environment['SKIP_FRONTEND']) {",
                  "    tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "}",
                  "else {",
                  "    tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "    ",
                  "    if(tests[requestname+\"Status code 200 . . . \"]) {",
                  "        ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Access token generated . . . \"]=result[\"token_type\"]===\"bearer\";",
                  "        ",
                  "        if(tests[requestname+\"Access token generated . . . \"]){",
                  "            ",
                  "            postman.setEnvironmentVariable(\"AUTHORIZATION_TYPE\",firstcap(result[\"token_type\"]));",
                  "            postman.setEnvironmentVariable(\"AUTHORIZATION_TOKEN\",result[\"access_token\"]);",
                  "            ",
                  "        }",
                  "    }",
                  "    else { ",
                  "        console.log(requestname+responseBody); ",
                  "    }",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"AUTHORIZATION_TOKEN\",null);",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_TOKEN\",btoa(environment[\"CLIENT_KEY\"]+\":\"+environment[\"CLIENT_SECRET\"]));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/token",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{USERNAME}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "password",
                  "value": "{{PASSWORD}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "scope",
                  "value": "PRODUCTION",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Generate an Access Token after we add an api."
          },
          "response": []
        }
      ]
    },
    {
      "name": "100 tags",
      "description": "",
      "item": [
        {
          "name": "tags::List tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List Tags: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "var jsonObject = xml2Json(responseBody);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::Add tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::Add tag: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=(true==true);",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking tagged resource size . . . \"]=result[\"result\"]['associationIds'].length===1;",
                  "            tests[requestname+\"Checking tagged resources . . . \"]=result[\"result\"]['associationIds'][0]===postman.getEnvironmentVariable(\"STORAGE_UUID\");",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TEMP_TAG_ID\",result[\"result\"][\"id\"]);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"storage\",\n    \"associationIds\": [\"{{STORAGE_UUID}}\"]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List new tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List new tag: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=(true==true);",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking tagged resource size . . . \"]=result[\"result\"]['id'].length===postman.getEnvironmentVariable(\"_TEMP_TAG_ID\");",
                  "            tests[requestname+\"Checking tagged resource size . . . \"]=result[\"result\"]['associationIds'].length===1;",
                  "            tests[requestname+\"Checking tagged resources . . . \"]=result[\"result\"]['associationIds'][0]===postman.getEnvironmentVariable(\"STORAGE_UUID\");",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"storage\",\n    \"associationIds\": [\"{{STORAGE_UUID}}\"]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List tag events",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List tag events: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking creation event . . . \"]=(result[\"result\"][0].status==='CREATED');",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/history",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List tag associations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List tag associations: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking associations . . . \"]=(result[\"result\"].length===1);",
                  "            tests[requestname+\"Checking for added association id . . . \"]=result[\"result\"][0].uuid===environment[\"STORAGE_UUID\"]",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List tagged resource by id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List tagged resource by id: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=!(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking association event . . . \"]=(result[\"result\"].uuid===postman.getEnvironmentVariable(\"STORAGE_UUID\"));",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations/{{STORAGE_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"{{_TEMP_TAG_ID}}\"]"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::Add association to tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::Add association to tag: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking associationId event . . . \"]=(result[\"result\"].id===postman.getEnvironmentVariable(\"_TMP_TAG_ID\"));",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"{{_TEMP_TAG_ID}}\"]"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List updated tag associations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List updated tag associations: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                tests[requestname+\"Checking associations length . . . \"]=(result[\"result\"].length===2);",
                  "                ",
                  "                tests[requestname+\"Checking for added association id . . . \"]=false;",
                  "                ",
                  "                for(var i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i].uuid===environment[\"_TEMP_TAG_ID\"]) ",
                  "                        tests[requestname+\"Checking for added association id . . . \"]=true;",
                  "                }",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::Remove tag association",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::Remove tag association: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations/{{_TEMP_TAG_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List deleted tag associations returns 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List deleted tag associations returns 404: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]!==null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations/{{_TEMP_TAG_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::Add multple associations to tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::Add association to tag: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                tests[requestname+\"Checking associations length . . . \"]=(result[\"result\"].length===2);",
                  "                ",
                  "                tests[requestname+\"Checking for added tag association id . . . \"]=false;",
                  "                ",
                  "                tests[requestname+\"Checking for added execution system association id . . . \"]=false;",
                  "                ",
                  "                for(var i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i].uuid===environment[\"_TEMP_TAG_ID\"])",
                  "                        tests[requestname+\"Checking for added tag association id . . . \"]=true;",
                  "                    ",
                  "                    else if(result[\"result\"][i].uuid===environment[\"COMPUTE_SYSTEM_ID\"])",
                  "                        tests[requestname+\"Checking for added execution system association id . . . \"]=true;",
                  "                }",
                  "            }",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"{{_TEMP_TAG_ID}}\", \"{{COMPUTE_SYSTEM_ID}}\"]"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List multiple updated tag associations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List multiple updated tag associations: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if(tests[requestname+\"Checking result is array . . . \"]){",
                  "                ",
                  "                tests[requestname+\"Checking associations length . . . \"]=(result[\"result\"].length===3);",
                  "                ",
                  "                tests[requestname+\"Checking for added storage system association id . . . \"]=false;",
                  "                ",
                  "                tests[requestname+\"Checking for added tag association id . . . \"]=false;",
                  "                ",
                  "                tests[requestname+\"Checking for added execution system association id . . . \"]=false;",
                  "                ",
                  "                for(var i=0;i<result[\"result\"].length;i++){",
                  "                    if(result[\"result\"][i].uuid===environment[\"STORAGE_UUID\"])",
                  "                        tests[requestname+\"Checking for added storage system association id . . . \"]=true;",
                  "                    ",
                  "                    else if(result[\"result\"][i].uuid===environment[\"_TEMP_TAG_ID\"])",
                  "                        tests[requestname+\"Checking for added tag association id . . . \"]=true;",
                  "                    ",
                  "                    else if(result[\"result\"][i].uuid===environment[\"COMPUTE_SYSTEM_ID\"])",
                  "                        tests[requestname+\"Checking for added execution system association id . . . \"]=true;",
                  "                }",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List first multiple tagged resource by id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List first multiple tagged resource by id: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=!(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking association uuid . . . \"]=(result[\"result\"].uuid===postman.getEnvironmentVariable(\"_TEMP_TAG_ID\"));",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations/{{_TEMP_TAG_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"{{_TEMP_TAG_ID}}\"]"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List second multiple tagged resource by id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List second multiple tagged resource by id: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=!(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking association uuid . . . \"]=(result[\"result\"].uuid===postman.getEnvironmentVariable(\"COMPUTE_SYSTEM_ID\"));",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations/{{COMPUTE_SYSTEM_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\"{{_TEMP_TAG_ID}}\"]"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::Clear all assocations for tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::Clear all assocations for tag: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List tag associations after clear",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List tag associations after clear: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            tests[requestname+\"Checking associations . . . \"]=(result[\"result\"].length===0);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}/associations",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::Delete tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::Delete Tag: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=(1===1);",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"storage\",\n    \"associationIds\": [\"{{STORAGE_UUID}}\"]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "tags::List deleted tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::List deleted tag: \";",
                  "",
                  "tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "",
                  "if(tests[requestname+\"Status code 404 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=(true==true);",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"error\";",
                  "        if(result[\"status\"]===\"error\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]!==null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "if ('tags::List Tags' === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('Delete Execution System');",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{TAGS_SERVICE}}/{{TAGS_VERSION}}{{_TEMP_TAG_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"storage\",\n    \"associationIds\": [\"{{STORAGE_UUID}}\"]\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "100 ~tags cleanup",
      "description": "",
      "item": [
        {
          "name": "tags::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"tags::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "110 _ uuids setup",
      "description": "",
      "item": [
        {
          "name": "uuids::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Start: \";",
                  "",
                  "if (postman.getEnvironmentVariable(\"SKIP_FRONTEND\")) {",
                  "    postman.setNextRequest('uuids setup::Create Directory');",
                  "    console.log(\"Skipping api registration for backend tests.\")",
                  "}",
                  "else {",
                  "    tests[requestname+\"Service is present. . . \"]=responseCode.code!==404;",
                  "    ",
                  "    if ( ! tests[requestname+\"Service is present. . . \"] ) {",
                  "        console.log(\"Service is not present. Skipping remaining \" + requestname.replace(/::.*/,'') + \" service tests...\");",
                  "        postman.setNextRequest(requestname.replace(/::.*/,'::End'));",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}?limit=0",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Subscribe Client to UUIDs API",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Subscribe Client to UUIDs API: \";",
                  "",
                  "if (environment['SKIP_FRONTEND']) {",
                  "    tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "}",
                  "else {",
                  "    tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "    ",
                  "    if(tests[requestname+\"Status code 200 . . . \"]){",
                  "        ",
                  "        try{",
                  "        ",
                  "            var result=JSON.parse(responseBody);",
                  "            tests[requestname+\"Result is JSON . . . \"]=true;",
                  "            tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "            if(result[\"status\"]===\"success\"){",
                  "                ",
                  "            }",
                  "        ",
                  "        }catch(e){",
                  "        ",
                  "            console.log(requestname+e);",
                  "            tests[requestname+\"Result is JSON . . . \"]=false;",
                  "        ",
                  "        }",
                  "        ",
                  "    }else{ console.log(requestname+responseBody); }",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\", encodeURI(postman.getEnvironmentVariable(\"TEST_DIR\")+\"-apps\"));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}/subscriptions",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"apiName\": \"UUIDs\",\n    \"apiVersion\": \"v2\",\n    \"apiProvider\": \"admin\",\n    \"tier\": \"UNLIMITED\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Generate an Access Token After UUIDs API Subscription copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Generate an Access Token After UUIDs API Subscription: \";",
                  "",
                  "function firstcap(astring){",
                  "    return astring.substr(0,1).toUpperCase()+astring.substr(1);",
                  "}",
                  "",
                  "if (environment['SKIP_FRONTEND']) {",
                  "    tests[requestname+\"Status code 404 . . . \"]=responseCode.code===404;",
                  "}",
                  "else {",
                  "    tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "    ",
                  "    if(tests[requestname+\"Status code 200 . . . \"]) {",
                  "        ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Access token generated . . . \"]=result[\"token_type\"]===\"bearer\";",
                  "        ",
                  "        if(tests[requestname+\"Access token generated . . . \"]){",
                  "            ",
                  "            postman.setEnvironmentVariable(\"AUTHORIZATION_TYPE\",firstcap(result[\"token_type\"]));",
                  "            postman.setEnvironmentVariable(\"AUTHORIZATION_TOKEN\",result[\"access_token\"]);",
                  "            ",
                  "        }",
                  "    }",
                  "    else { ",
                  "        console.log(requestname+responseBody); ",
                  "    }",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"AUTHORIZATION_TOKEN\",null);",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_TOKEN\",btoa(environment[\"CLIENT_KEY\"]+\":\"+environment[\"CLIENT_SECRET\"]));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/token",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "description": ""
              },
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_TOKEN}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{USERNAME}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "password",
                  "value": "{{PASSWORD}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "scope",
                  "value": "PRODUCTION",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Generate an Access Token after we add an api."
          },
          "response": []
        },
        {
          "name": "uuids setup::Create Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Create Directory: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_DIRECTORY_UUID\",result.result.uuid);",
                  "            postman.setEnvironmentVariable(\"_TMP_DIRECTORY_URL\",result.result._links.self.href);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\", encodeURI(postman.getEnvironmentVariable(\"TEST_DIR\")+\"-apps\"));"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}",
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \"action\": \"mkdir\", \"path\": \"{{TEST_DIR_ENCODED}}/apps/wc-1.00\" }"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Stage File",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Stage File: \";",
                  "",
                  "tests[requestname+\"Status code 202 . . . \"]=responseCode.code===202;",
                  "",
                  "/**",
                  " * This implements a blocking `sleep()` command. It is horrible practice, ",
                  " * but is needed due to lack of async support in these tests. Had we used",
                  " * the more popular `setTimeout()` function, the pre-request script would",
                  " * exit before the timeout was reached.",
                  " *",
                  " * @param sleepDuration the number of milliseconds to wait",
                  " */",
                  "function sleepFor( sleepDuration ){",
                  "    var now = new Date().getTime();",
                  "    while(new Date().getTime() < now + sleepDuration){ /* do nothing */ } ",
                  "}",
                  "",
                  "if(tests[requestname+\"Status code 202 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wrapper.sh\";",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_FILE_UUID\",result.result.uuid);",
                  "            postman.setEnvironmentVariable(\"_TMP_FILE_URL\",result.result._links.self.href);",
                  "            ",
                  "            sleepFor(3000);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "fileName",
                  "value": "wrapper.sh",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "fileToUpload",
                  "type": "file",
                  "enabled": true,
                  "src": "data/wrapper.sh"
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Add Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Add Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            postman.setEnvironmentVariable(\"_TMP_MONITOR_ID\",result.result.id);",
                  "            postman.setEnvironmentVariable(\"_TMP_MONITOR_URL\",result.result._links.self.href);",
                  "           ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \n  \"active\": true, \n  \"frequency\": 720, \n  \"internalUsername\": null, \n  \"target\": \"{{STORAGE_SYSTEM_ID}}\", \n  \"updateSystemStatus\": false \n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Create Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Create Notification: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_NOTIFICATION_ID\",result.result.id);",
                  "            postman.setEnvironmentVariable(\"_TMP_NOTIFICATION_URL\",result.result._links.self.href);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \n  \"url\":\"{{USER_EMAIL}}\",\n  \"event\":\"OVERWRITTEN\",\n  \"associatedUuid\":\"{{_TMP_FILE_UUID}}\",\n  \"persistent\":false\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Create PostIt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Create PostIt: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            tests[requestname+\"Checking creator . . . \"]=result[\"result\"][\"creator\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking authenticated . . . \"]=result[\"result\"][\"authenticated\"]===true;",
                  "            tests[requestname+\"Checking remainingUses . . . \"]=result[\"result\"][\"remainingUses\"]===2;",
                  "            tests[requestname+\"Checking noauth . . . \"]=result[\"result\"][\"noauth\"]===false;",
                  "            tests[requestname+\"Checking url . . . \"]=result[\"result\"][\"url\"]===environment[\"_TMP_STORAGE_URL\"];",
                  "            tests[requestname+\"Checking method . . . \"]=result[\"result\"][\"method\"]===\"GET\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_POSTIT_NONCE\",result.result.postit);",
                  "            // postman.setEnvironmentVariable(\"_TMP_POSTIT_ID\",result.result.postit);",
                  "            postman.setEnvironmentVariable(\"_TMP_POSTIT_URL\",result.result._links.self.href);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}",
                  "",
                  "postman.setEnvironmentVariable(\"POSTITS_NONCE\",null);",
                  "postman.setEnvironmentVariable(\"POSTITS_URI\",null);",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "url",
                  "value": "{{_TMP_STORAGE_URL}}",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "method",
                  "value": "GET",
                  "type": "text",
                  "enabled": true
                },
                {
                  "key": "maxUses",
                  "value": "2",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": "Create a new PostIt."
          },
          "response": []
        },
        {
          "name": "uuids setup::Create App",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Create App: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result ID . . . \"]=result[\"result\"].id===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"].name===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_APP_ID\",result.result.id);",
                  "            postman.setEnvironmentVariable(\"_TMP_APP_UUID\",result.result.uuid);",
                  "            postman.setEnvironmentVariable(\"_TMP_APP_URL\",result.result._links.self.href);",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}",
                  "postman.setEnvironmentVariable(\"_TEMP_APP_UPDATE_COUNTER\", 0);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"wc-{{TEST_DATE}}-test\",\n  \"parallelism\": \"SERIAL\",\n  \"version\": \"1.00\",\n  \"helpURI\": \"http: //www.gnu.org/s/coreutils/manual/html_node/wc-invocation.html\",\n  \"label\": \"Word Count\",\n  \"shortDescription\": \"Count words in a file\",\n  \"longDescription\": \"\",\n  \"tags\": [\n    \"textutils\",\n    \"gnu\"\n  ],\n  \"ontology\": [\n    \"http: //sswapmeet.sswap.info/algorithms/wc\"\n  ],\n  \"defaultMemory\": 1,\n  \"defaultProcessors\": 1,\n  \"defaultQueue\": \"debug\",\n\t  \"deploymentPath\": \"{{TEST_DIR_ENCODED}}/apps/wc-1.00\",\n  \"deploymentSystem\": \"{{STORAGE_SYSTEM_ID}}\",\n  \"executionSystem\": \"{{COMPUTE_SYSTEM_ID}}\",\n  \"executionType\": \"CLI\",\n  \"templatePath\": \"wrapper.sh\",\n  \"testPath\": \"wrapper.sh\",\n  \"checkpointable\": false,\n  \"modules\": null,\n  \"inputs\": [\n    {\n      \"id\": \"query1\",\n      \"value\": {\n        \"default\": \"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper.sh\",\n        \"validator\": \"\",\n        \"required\": true,\n        \"visible\": true\n      },\n      \"details\": {\n        \"label\": \"File to count words in: \",\n        \"description\": \"\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"http: //sswapmeet.sswap.info/util/TextDocument\"\n        ],\n        \"minCardinality\": 1,\n        \"maxCardinality\": 1,\n        \"fileTypes\": [\n          \"text-0\"\n        ]\n      }\n    }\n  ],\n  \"parameters\": [\n    {\n      \"id\": \"printLongestLine\",\n      \"value\": {\n        \"type\": \"string\",\n        \"validator\": \"\",\n        \"visible\": true,\n        \"required\": false\n      },\n      \"details\": {\n        \"label\": \"Print the length of the longest line\",\n        \"description\": \"Command option -L\"\n      },\n      \"semantics\": {\n        \"ontology\": [\n          \"xs: boolean\"\n        ]\n      }\n    }\n  ]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Create Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Create Job: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test\";",
                  "            tests[requestname+\"Checking result appId . . . \"]=result[\"result\"][\"appId\"]===\"wc-\"+environment[\"TEST_DATE\"]+\"-test-1.00\";",
                  "            ",
                  "            postman.setEnvironmentVariable(\"_TMP_JOB_ID\",result[\"result\"].id);",
                  "            postman.setEnvironmentVariable(\"_TMP_JOB_URL\",result[\"result\"]._links.self.href);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\":\"wc-{{TEST_DATE}}-test\",\n  \"appId\":\"wc-{{TEST_DATE}}-test-1.00\",\n  \"archive\": false,\n  \"memoryPerNode\":1,\n  \"notifications\":[\n    {\n      \"url\":\"{{USER_EMAIL}}\",\n      \"event\":\"FINISHED\"\n    }\n  ],\n  \"inputs\":{\n    \"query1\":\"agave://{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}/apps/wc-1.00/wrapper.sh\"\n  }\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Stop Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Stop Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{_TMP_JOB_ID}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\":\"stop\"\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Create Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Create Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result schema title . . . \"]=result[\"result\"][\"schema\"][\"title\"]===\"Test Example Schema\";",
                  "            postman.setEnvironmentVariable(\"_TMP_SCHEMA_UUID\",result[\"result\"].uuid);",
                  "            postman.setEnvironmentVariable(\"_TMP_SCHEMA_URL\",result[\"result\"]._links.self.href);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Test Example Schema\",\n    \"type\": \"object\",\n    \"properties\": { \"species\": { \"type\": \"string\" } },\n    \"required\": [\"species\"]\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids setup::Create Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids setup::Create Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 201 . . . \"]=responseCode.code===201;",
                  "",
                  "if(tests[requestname+\"Status code 201 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result owner . . . \"]=result[\"result\"][\"owner\"]===environment[\"USERNAME\"];",
                  "            tests[requestname+\"Checking result name . . . \"]=result[\"result\"][\"name\"]===\"testmetadata\";",
                  "            tests[requestname+\"Checking result value species . . . \"]=result[\"result\"][\"value\"][\"properties\"][\"species\"]===\"arabidopsis\";",
                  "            tests[requestname+\"Checking result value description . . . \"]=result[\"result\"][\"value\"][\"properties\"][\"description\"]===\"A model organism...\";",
                  "            postman.setEnvironmentVariable(\"_TMP_META_UUID\",result[\"result\"].uuid);",
                  "            postman.setEnvironmentVariable(\"_TMP_META_URL\",result[\"result\"]._links.self.href);",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"testmetadata\",\n    \"value\": {\"title\": \"Example Metadata\", \"properties\": {\"species\": \"arabidopsis\", \"description\": \"A model organism...\"}},\n    \"schemaId\": null,\n    \"associationIds\": [\n    \t\"{{_TMP_JOB_ID}}\",\n    \t\"{{_TMP_DIRECTORY_UUID}}\",\n    \t\"{{_TMP_FILE_UUID}}\",\n    \t\"{{_TMP_MONITOR_ID}}\",\n    \t\"{{_TMP_APP_UUID}}\",\n    \t\"{{_TMP_NOTIFICATION_ID}}\",\n    \t\"{{_TMP_SCHEMA_UUID}}\"\n    ]\n}"
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "110 uuids",
      "description": "",
      "item": [
        {
          "name": "uuids::Resolve system uuid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuid::Resolve system uuid: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is system . . . \"]=result.result.type==='system';",
                  "            tests[requestname+\"Checking result contains system uuid . . . \"]=result.result.uuid===environment['STORAGE_UUID'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname + e + \"\\n\" + responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{STORAGE_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve system uuid and expand",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuid::Resolve system uuid and expand: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result has system id . . . \"]=result.result.id===environment['STORAGE_SYSTEM_ID'];",
                  "            tests[requestname+\"Checking result has system uuid . . . \"]=result.result.uuid===environment['STORAGE_UUID'];",
                  "            tests[requestname+\"Checking result has storage config . . . \"]=(result.result.storage instanceof Object);",
                  "            tests[requestname+\"Checking result url is default storage system url . . . \"]=result.result._links.self.href===environment['_TMP_STORAGE_URL'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{STORAGE_UUID}}?expand=true",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Directory UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve system uuid: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is file . . . \"]=result.result.type==='file';",
                  "            tests[requestname+\"Checking result url matches test directory url . . . \"]=result.result._links.self.href===environment['_TMP_DIRECTORY_URL'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_DIRECTORY_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve File UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve File UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is file . . . \"]=result.result.type==='file';",
                  "            tests[requestname+\"Checking result url matches test file url . . . \"]=result.result._links.self.href===environment['_TMP_DIRECTORY_URL'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_DIRECTORY_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve App UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve App UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is app . . . \"]=result.result.type==='app';",
                  "            tests[requestname+\"Checking result url matches app url . . . \"]=result.result._links.self.href===environment['_TMP_APP_URL'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_APP_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Job UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve Job UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if (result[\"status\"]===\"success\") {",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is job . . . \"]=result.result.type==='job';",
                  "            tests[requestname+\"Checking result url matches job url . . . \"]=result.result._links.self.href===environment['_TMP_JOB_URL'];",
                  "        }",
                  "    }",
                  "    catch(e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_JOB_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Monitor UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve Monitor UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if (result[\"status\"]===\"success\") {",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is monitor . . . \"]=result.result.type==='monitor';",
                  "            tests[requestname+\"Checking result url matches monitor url . . . \"]=result.result._links.self.href===environment['_TMP_MONITOR_URL'];",
                  "            ",
                  "            console.log(environment['_TMP_MONITOR_URL'] + \" === \" + result.result._links.self.href)",
                  "        }",
                  "    }",
                  "    catch(e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_MONITOR_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Notification UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve Notification UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if (result[\"status\"]===\"success\") {",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is notification . . . \"]=result.result.type==='notification';",
                  "            tests[requestname+\"Checking result url matches notification url . . . \"]=result.result._links.self.href===environment['_TMP_NOTIFICATION_URL'];",
                  "        }",
                  "    }",
                  "    catch(e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_NOTIFICATION_ID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Metadata UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve Metadata UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if (result[\"status\"]===\"success\") {",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is metadata . . . \"]=result.result.type==='metadata';",
                  "            tests[requestname+\"Checking result url matches metadata url . . . \"]=result.result._links.self.href===environment['_TMP_META_URL'];",
                  "        }",
                  "    }",
                  "    catch(e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_META_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Metadata Schema UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve Metadata Schema UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if (result[\"status\"]===\"success\") {",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is schema . . . \"]=result.result.type==='schema';",
                  "            tests[requestname+\"Checking result url matches schema url . . . \"]=result.result._links.self.href===environment['_TMP_SCHEMA_URL'];",
                  "        }",
                  "    }",
                  "    catch(e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_SCHEMA_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve multiple uuid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuid::Resolve multiple uuid: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if (tests[requestname+\"Checking result is array . . . \"]) {",
                  "                ",
                  "                var queryUuids = [",
                  "                    environment['STORAGE_UUID'],",
                  "                    environment['_TMP_DIRECTORY_UUID'],",
                  "                    environment['_TMP_FILE_UUID'],",
                  "                    environment['_TMP_APP_UUID'],",
                  "                    environment['_TMP_JOB_ID'],",
                  "                    environment['_TMP_MONITOR_ID'],",
                  "                    environment['_TMP_NOTIFICATION_ID'],",
                  "                    environment['_TMP_META_UUID'],",
                  "                    environment['_TMP_SCHEMA_UUID']",
                  "                ];",
                  "                ",
                  "                var returnedUuids = result[\"result\"].map(function(resource) {",
                  "                    return resource.uuid;",
                  "                });",
                  "                ",
                  "                queryUuids.forEach(function(uuid) {",
                  "                    tests[requestname+\"Checking uuid \" + uuid + \" was resolved . . . \"]=(returnedUuids.indexOf(uuid) != -1);",
                  "                });",
                  "                ",
                  "                ",
                  "                ",
                  "                // tests[requestname+\"Checking all uuid were resolved . . . \"]=(returnedUuids.intersect(queryUuids).length == queryUuids.length);",
                  "                ",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}?uuids={{STORAGE_UUID}},{{_TMP_DIRECTORY_UUID}},{{_TMP_FILE_UUID}},{{_TMP_APP_UUID}},{{_TMP_JOB_ID}},{{_TMP_MONITOR_ID}},{{_TMP_NOTIFICATION_ID}},{{_TMP_META_UUID}},{{_TMP_SCHEMA_UUID}}",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve multiple uuid and expand",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuid::Resolve multiple uuid and expand: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is array . . . \"]=(result[\"result\"] instanceof Array);",
                  "            if (tests[requestname+\"Checking result is array . . . \"]) {",
                  "                ",
                  "               var queryUuids = [",
                  "                   { \"type\": \"system\", \"field\": \"uuid\", uuid: environment['STORAGE_UUID']},",
                  "                   { \"type\": \"directory\", \"field\": \"system\", uuid: environment['STORAGE_SYSTEM_ID']},",
                  "                   { \"type\": \"file\", \"field\": \"system\", uuid: environment['STORAGE_SYSTEM_ID']},",
                  "                   { \"type\": \"app\", \"field\": \"uuid\", uuid: environment['_TMP_APP_UUID']},",
                  "                   { \"type\": \"job\", \"field\": \"id\", \"uuid\": environment['_TMP_JOB_ID']},",
                  "                   { \"type\": \"monitor\", \"field\": \"id\", \"uuid\": environment['_TMP_MONITOR_ID']},",
                  "                   { \"type\": \"notification\", \"field\": \"id\", \"uuid\": environment['_TMP_NOTIFICATION_ID']},",
                  "                   { \"type\": \"metadata\", \"field\": \"uuid\", \"uuid\": environment['_TMP_META_UUID']},",
                  "                   { \"type\": \"schema\", \"field\": \"uuid\", \"uuid\": environment['_TMP_SCHEMA_UUID']}",
                  "               ];",
                  "",
                  "              queryUuids.forEach(function(expectedValue) {",
                  "",
                  "                var searchObject = {};",
                  "                searchObject[expectedValue.field] = expectedValue.value",
                  "",
                  "                tests[requestname+\"Checking \" + expectedValue.type + \" uuid was present and expanded in the response . . . \"]= ",
                  "                  (!result.result.none(searchObject));",
                  "              ",
                  "              });",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}?uuids={{STORAGE_UUID}},{{_TMP_DIRECTORY_UUID}},{{_TMP_FILE_UUID}},{{_TMP_APP_UUID}},{{_TMP_JOB_ID}},{{_TMP_MONITOR_ID}},{{_TMP_NOTIFICATION_ID}},{{_TMP_META_UUID}},{{_TMP_SCHEMA_UUID}}&expand=true",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Generate UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Generate UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        ",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            if (tests[requestname+\"Checking result is object . . . \"]) {",
                  "                ",
                  "                tests[requestname+\"Checking response type is tenant uuid . . . \"]=result.result.type==='TENANT';",
                  "                tests[requestname+\"Checking response type uuid ends in tenant code 016 . . . \"]=result.result.uuid.has('-016');",
                  "            }",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "if ('uuid::Resolve system uuid' === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('Delete Execution System');",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}",
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"type\": \"TENANT\" }"
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Expanded File UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve File UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result type is file . . . \"]=(result.result.name==='wrapper.sh');",
                  "            tests[requestname+\"Checking result url matches test file url . . . \"]=result.result._links.self.href===environment['_TMP_FILE_URL'];",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_FILE_UUID}}?expand=true",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::Resolve Expanded Metadata Schema UUID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::Resolve Expanded Metadata Schema UUID: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try {",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        ",
                  "        if (result[\"status\"]===\"success\") {",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is object . . . \"]=(result[\"result\"] instanceof Object);",
                  "            tests[requestname+\"Checking result uuid matches schema uuid . . . \"]=result.result.uuid===environment['_TMP_SCHEMA_UUID'];",
                  "            tests[requestname+\"Checking result url matches schema url . . . \"]=result.result._links.self.href===environment['_TMP_SCHEMA_URL'];",
                  "        }",
                  "    }",
                  "    catch(e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else { ",
                  "    console.log(requestname+responseBody); ",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{UUID_SERVICE}}/{{UUID_VERSION}}{{_TMP_SCHEMA_UUID}}?expand=true",
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "110 ~uuids cleanup",
      "description": "",
      "item": [
        {
          "name": "uuids cleanup::Delete Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete Job: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{JOBS_SERVICE}}/{{JOBS_VERSION}}{{_TMP_JOB_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids cleanup::Delete Directory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete Directory: \";",
                  "    ",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(!tests[requestname+\"Status code 200 . . . \"]) console.log(requestname+responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  "",
                  "",
                  "// unset directory variables",
                  "postman.setEnvironmentVariable(\"_TMP_DIRECTORY_UUID\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_DIRECTORY_URL\",null);",
                  "",
                  "// unset file variables",
                  "postman.setEnvironmentVariable(\"_TMP_FILE_UUID\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_FILE_URL\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{FILES_SERVICE}}/{{FILES_VERSION}}media/system/{{STORAGE_SYSTEM_ID}}/{{TEST_DIR_ENCODED}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids cleanup::Delete App",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete App: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            tests[requestname+\"Checking result is null . . . \"]=result[\"result\"]==null;",
                  "        }",
                  "        else {",
                  "            console.log(requestname+responseBody);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    }",
                  "}",
                  "else {",
                  "    console.log(requestname+responseBody);",
                  "}",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_APP_ID\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_APP_URL\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{APPS_SERVICE}}/{{APPS_VERSION}}{{_TMP_APP_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids cleanup::Delete Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete Metadata: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_META_UUID\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_META_URL\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}data/{{_TMP_META_UUID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids cleanup::Delete Metadata Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete Metadata Schema: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_SCHEMA_UUID\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_SCHEMA_URL\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{META_SERVICE}}/{{META_VERSION}}schemas/{{_TMP_SCHEMA_UUID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids cleanup::Delete Monitor",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete Monitor: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]==null;",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_MONITOR_UUID\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_MONITOR_URL\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{MONITORS_SERVICE}}/{{MONITORS_VERSION}}{{_TMP_MONITOR_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "size",
                  "value": "original",
                  "type": "text",
                  "enabled": true
                }
              ]
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids cleanup::Delete PostIt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete PostIt: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===\"\";",
                  "            ",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        tests[requestname+\"Result is JSON . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_POSTIT_NONCE\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_POSTIT_URL\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{POSTITS_SERVICE}}/{{POSTITS_VERSION}}{{_TMP_POSTIT_NONCE}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids cleanup::Delete Notification",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids cleanup::Delete Notification: \";",
                  "",
                  "tests[requestname+\"Status code 200 . . . \"]=responseCode.code===200;",
                  "",
                  "if(tests[requestname+\"Status code 200 . . . \"]){",
                  "    ",
                  "    try{",
                  "    ",
                  "        var result=JSON.parse(responseBody);",
                  "        tests[requestname+\"Result is JSON . . . \"]=true;",
                  "        tests[requestname+\"Checking status . . . \"]=result[\"status\"]===\"success\";",
                  "        if(result[\"status\"]===\"success\"){",
                  "            ",
                  "            tests[requestname+\"Checking message . . . \"]=result[\"message\"]===null;",
                  "            tests[requestname+\"Checking result is empty . . . \"]=result[\"result\"] == null;",
                  "        }",
                  "        ",
                  "    }catch(e){",
                  "    ",
                  "        console.log(requestname+e);",
                  "        tests[requestname+\"Result is null . . . \"]=false;",
                  "    ",
                  "    }",
                  "",
                  "    ",
                  "}else{ console.log(requestname+responseBody); }",
                  "",
                  "postman.setEnvironmentVariable(\"_TMP_NOTIFICATION_ID\",null);",
                  "postman.setEnvironmentVariable(\"_TMP_NOTIFICATION_URL\",null);"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (Object.has(environment, 'SAVE_INIT_ENVIRONMENT_VARIABLES')) {",
                  "    eval(environment['SAVE_INIT_ENVIRONMENT_VARIABLES']);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{NOTIFICATIONS_SERVICE}}/{{NOTIFICATIONS_VERSION}}{{_TMP_NOTIFICATION_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "description": ""
          },
          "response": []
        },
        {
          "name": "uuids::End",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"uuids::End: \";",
                  "",
                  "if (requestname.replace(/::.*/,'::Start') === postman.getEnvironmentVariable(\"SKIP_TO_TEST\")) {",
                  "    postman.setNextRequest('cleanup::Start');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "name": "999 cleanup",
      "description": "",
      "item": [
        {
          "name": "cleanup::Start",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var requestname=\"cleanup::Start \";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "https://httpbin.org/status/200",
            "method": "GET",
            "header": [],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "cleanup::Delete Execution System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"_TMP_COMPUTE_URL\",null);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{COMPUTE_SYSTEM_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "cleanup::Delete Storage System",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"_TMP_STORAGE_URL\",null);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{SYSTEMS_SERVICE}}/{{SYSTEMS_VERSION}}{{STORAGE_SYSTEM_ID}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{AUTHORIZATION_TOKEN_STRING}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        },
        {
          "name": "cleanup::Delete the New Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"CLIENT_NAME\",null);",
                  "",
                  "postman.setEnvironmentVariable(\"TEST_DATE\",null);",
                  "postman.setEnvironmentVariable(\"TEST_DIR\",null);",
                  "postman.setEnvironmentVariable(\"TEST_DIR_ENCODED\",null);",
                  "",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_TYPE\",null);",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_TOKEN\",null);",
                  "postman.setEnvironmentVariable(\"BASIC_AUTHORIZATION_USER_TOKEN\",null);",
                  "postman.setEnvironmentVariable(\"CLIENT_KEY\",null);",
                  "postman.setEnvironmentVariable(\"CLIENT_SECRET\",null);",
                  "postman.setEnvironmentVariable(\"AUTHORIZATION_TOKEN\",null);"
                ]
              }
            }
          ],
          "request": {
            "url": "{{BASEURL}}/{{CLIENTS_SERVICE}}/{{CLIENTS_VERSION}}{{CLIENT_NAME}}",
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{BASIC_AUTHORIZATION_TYPE}} {{BASIC_AUTHORIZATION_USER_TOKEN}}",
                "description": ""
              },
              {
                "key": "{{JWT_HEADER_NAME}}",
                "value": "{{JWT_HEADER_VALUE}}",
                "description": ""
              }
            ],
            "body": [],
            "description": ""
          },
          "response": []
        }
      ]
    }
  ]
}