---

kill_core_containers: false

######################################################################################
#
#    Docker registry from which to pull the images
#
######################################################################################

core_version: 2.2.6
core_docker_private_registry:
core_docker_registry_account: agaveapi


# determines whether the default core compose templates are used for the deployment. alternative is to use a git
# repository and path to checkout core compose files.
deploy_core_default_templates: true

######################################################################################
#
#    External private git repo where compose files can optionally be pulled from
#
######################################################################################

# the key file used to checkout the core compose repo.
core_compose_repo_key_file: core-compose.key

# URI to the git repository:
core_compose_repo_uri: git@gitlab.tacc.utexas.edu:jstubbs/core-compose.git

# directory name to check out the repo into.
core_compose_repo_name: core-compose

######################################################################################
#
#    Network, SSL, and discovery
#
######################################################################################

# DNS and network discovery endpoint configs
agave_proxy_core_ip: "{{ hostvars[ groups['core'][0] ]['ansible_ssh_host'] }}"
agave_core_hostname: api.sandbox.agaveplatform.org
agave_core_log_service: "http://{{ hostvars[ groups['core'][0] ]['ansible_ssh_host'] }}/logging"
agave_core_iplant_proxy_service: "http://{{ hostvars[ groups['core'][0] ]['ansible_ssh_host'] }}"

# SSL and container security/discovery properties
core_deploy_ssl_certs: false
core_deploy_httpd_balancer: false

######################################################################################
#
#    Persistence and queueing configs
#
######################################################################################

# Mongodb connection info
agave_core_metadata_host: "{{ hostvars[ groups['db'][0] ]['ansible_ssh_host'] }}"
agave_core_metadata_port: 27017
agave_core_metadata_user: wcs

# Beanstalkd connection info
beanstalk_server: "{{ hostvars[ groups['db'][0] ]['ansible_ssh_host'] }}"
agave_core_messaging_host: "{{ hostvars[ groups['db'][0] ]['ansible_ssh_host'] }}"
agave_core_messaging_port: 11300

# Mysql connection info
mysql_core_host: "{{ hostvars[ groups['db'][0] ]['ansible_ssh_host'] }}"
mysql_core_port: 3301
mysql_core_user: agaveapi
mysql_core_password: d3f@ult$


######################################################################################
#
#    SMTP mail config for email alerts and notifications
#
######################################################################################

# Default email provider. Can be sendgrid, smtp, local, log, or none
agave_core_smtps_provider: sendgrid
agave_core_smtps_host: smtp.sendgrid.net
agave_core_smtps_auth: true
agave_core_smtps_port: 587
agave_core_smtps_user: agavedev


######################################################################################
#
#    Data transfer behavior properties
#
######################################################################################

# If true, smaller files will be proxied with a GET and PUT in all data transfers. Otherwise, they will be
# proxied in memory via streaming buffer copies. The former can be much faster for bulk file operations
# and cross-protocol transfers where dynamic window sizing and parallel/striped transfers
agave_core_allow_relay_transfer: false

# Max file size in GB that can be relayed. Any file larger than this will be copied in memory
# through streaming buffers. If this is enabled, then the host must have sufficient disk for
# every worker process that moves data to simultaneously be copying data. That means, at a minimum
# agave_core_transforms_max_transform_tasks
#   total_data_containers =
#     ((agave_core_transforms_max_staging_tasks + agave_core_transforms_max_transform_tasks) * # transfer containers) +
#     ((agave_core_apps_max_cloning_tasks + agave_core_apps_max_publishing_tasks) * # app countainers) +
#     ((agave_core_files_max_transform_tasks + agave_core_files_max_staging_tasks) * # files containers) +
#     (agave_core_job_max_submission_tasks + agave_core_job_max_archiving_tasks + agave_core_job_max_staging_tasks) * # job containers)
#
# minimum disk (GB) needed is then calculated as
#   (total_data_containers *  agave_core_max_relay_transfer_size) * 1.2
#
agave_core_max_relay_transfer_size: 1


######################################################################################
#
#    Common api & container properties
#
######################################################################################

#TODO: We can calculate and validate memory settings by looking at the following hosts facts:
# ansible_memfree_mb, ansible_memtotal_mb, ansible_swapfree_mb, ansible_swaptotal_mb

# Base memory config on all java containers. This can be overridden on a container by container basis
agave_core_java_mem_limit: 2048m

# Base memory config on all php containers. This can be overridden on a container by container basis
agave_core_php_mem_limit: 2048m

# Max results that can be returned by any api call
agave_core_max_page_size: 250

# Max number of results returned if no pagination parameter is included in the request URL
agave_core_default_page_size: 100


######################################################################################
#
#    Maintenance and task cleanup properties
#
######################################################################################

# Properties to handle reaper threads that clean up zombie tasks created
# by container crashing, or process abandonment.
agave_zombie_cleanup_enabled: true
# Max age in hours a task may be abandonded before being cleaned up
agave_zombie_task_lifetime: 15
# Max time in seconds between task executions
agave_zombie_cleanup_interval: 5
# Max number of zombie tasks to process per run
agave_zombie_cleanup_batch_size: 100


######################################################################################
#
#    General isolation and tenancy properties
#
######################################################################################

# If true, the workers will be disabled in the containers and only the API services will run.
agave_core_api_only: false

# If true, the API endpoints will be disabled in the containers and only worker processes will run.
# Setting thish to true along with agave_core_drain_all_queues to true renders the container useless.
agave_core_workers_only: false

# If true, no workers will be started on the target host. This effectively turns a container into an API
# only container. If set to true, there must be a worker container with this value set to true or no
# async tasks such as job submission, monitoring, notifications, etc will be processed.
agave_core_drain_all_queues: false

# set to the textual id of a tenant to enable work for just this tenant
# this will not preclude other tenants from accepting work for this
# tenant
agave_core_dedicated_tenant_id: false

# set to a comma-separated list of systems who will receive exclusive
# use of this worker for processing their activity. To isolate further
# by queue, specify the systems as "system_id#queue_name"
agave_core_dedicated_system_ids: false

# set to a comma-separated list of users who will receive exclusive
# use of this worker for processing their activity
agave_core_dedicated_user_ids: false

######################################################################################
#
#    Individual core science api service properties
#
######################################################################################

#TODO: We can calculate and validate memory settings by looking at the following hosts facts:
# ansible_memfree_mb, ansible_memtotal_mb, ansible_swapfree_mb, ansible_swaptotal_mb



# Max memory for the jobs container. This should be at least 8GB for a worker.
# API only deployment can be significantly less. This value Will bound xmx in the
# JVM was well. General rule of thumb is 0.5 core and 1GB memory per data-centric task
# per container. High job rates can grow JVM system utilization upwards of 1CPU
# and 2GB memory per transfer task, so plan accordingly. If your resources allow,
# set agave_core_jobs_mem_limit to False to uncap the memory on this container.
agave_core_jobs_mem_limit: 8192m
agave_core_job_max_staging_tasks: 5
agave_core_job_max_archiving_tasks: 5
agave_core_job_max_monitoring_tasks: 2
agave_core_job_max_submission_tasks: 1
core_deploy_jobs: true

# Max memory for the files container. This should be at least 8GB for a worker.
# API only deployment can be significantly less. This value Will bound xmx on the
# JVM was well. General rule of thumb is 0.5 core and 1GB memory per data-centric task
# per container. High job rates can grow JVM system utilization upwards of 1CPU
# and 2GB memory per transfer task, so plan accordingly. If your resources allow,
# set agave_core_files_mem_limit to False to uncap the memory on this container.
agave_core_files_mem_limit: 8192m
agave_core_files_max_staging_tasks: 5
agave_core_files_max_transform_tasks: 5
core_deploy_files: true

# Max memory for the apps container. This should be at least 2GB. 4GB is recommended.
# If app cloning or publishing are pretty common, bump this to 4GB in single host
# deployments. Workers should be at least 2GB on their own.
agave_core_apps_mem_limit: 4096m
# Number of tasks dedicated to publishing.
agave_core_apps_max_publishing_tasks: 1
agave_core_apps_max_cloning_tasks: 1
core_deploy_apps: true

# Max memory for the systmes container. 2GB should be more than enough.
# Add containers if you run out of memory.
agave_core_systems_mem_limit: 2048m
core_deploy_systems: true

# Max memory for the monitors container. 2GB should be sufficient for an
# API only deployment. For single host deployments and worker containers,
# this can be bumped up to 8GB based on the number of monitoring tasks
# and frequency with which they run.
agave_core_monitors_mem_limit: 8192m
agave_core_monitor_min_check_interval: 0
agave_core_monitors_max_tasks: 1
agave_core_monitors_max_retries: 5
core_deploy_monitors: true

# Max memory for the transforms container. 2GB should be more than enough.
# Add containers if you run out of memory.
agave_core_profiles_mem_limit: 1024m
core_deploy_custom_profiles: false

# Max memory for the metadata container. 4GB should be more than enough
# under normal usage. If request size is particularly large, bump the
# memory by a couple gig. Anything over 4GB, and you should scale out
# the containers rather than bumping this one in size.
agave_core_metadata_mem_limit: 4048m
core_deploy_metadata: true

# Max memory for the transforms container. 2GB should be more than enough.
# Add containers if you run out of memory.
agave_core_transforms_mem_limit: 2048m
agave_core_transforms_max_staging_tasks: 2
agave_core_transforms_max_transform_tasks: 2
core_deploy_notifications: true
core_deploy_transforms: true

# Max memory for the realtime container. 2GB should be more than enough.
# Add containers if you run out of memory.
agave_core_realtime_mem_limit: 2048m
agave_core_realtime_service_type: pushpin
agave_core_realtime_service: "http://{{ hostvars[ groups['auth'][0] ]['ansible_ssh_host'] }}/pushpin"
agave_core_realtime_service_realm_id:
agave_core_realtime_service_realm_key:
core_deploy_realtime: true

# Max memory for the tags container. 2GB should be more than enough.
# Add containers if you run out of memory.
agave_core_tags_mem_limit: 1024m
core_deploy_tags: true

# Max memory for the uuids container. 2GB should be more than enough.
# Add containers if you run out of memory.
agave_core_uuids_mem_limit: 2048m
core_deploy_uuids: true

# Max memory for the postits container. PHP services rarely need more than 2GB
agave_core_postits_mem_limit: 2048m
core_deploy_postits: true

# Max memory for the usage container. PHP services rarely need more than 2GB
agave_core_usage_mem_limit: 2048m
core_deploy_usage: true

# Max memory for the tenants container. PHP services rarely need more than 2GB
agave_core_tenants_mem_limit: 1024m
core_deploy_tenants: true

# Max memory for the logging container. PHP services rarely need more than 2GB
agave_core_logging_mem_limit: 1024m
core_deploy_logging: true

# Max memory for the postits container. PHP services rarely need more than 2GB
agave_core_docs_mem_limit: 1024m
core_deploy_docs: true

# Max memory for the stats container. PHP services rarely need more than 2GB
agave_core_stats_mem_limit: 2048m
core_deploy_stats: false

# Max memory for notifications container. 2GB should be enough
# under normal usage. Split out a worker container and bump threads
# before bumping memory above 4GB. The load here comes from event processing, not the API.
agave_core_notifications_mem_limit: 2048m
agave_core_notifications_max_notification_tasks: 2
agave_core_notification_queue: "{{tenant_id}}.notifications.queue"
agave_core_notification_topic: "{{tenant_id}}.notifications.topic"
# notifications have a retry policy with optional persistence upon failure. If failed, this configures
# where to write the failed notification and the terms of persistence. By default, the metadata service's
# mongodb is used.
agave_core_notification_failed_db_host: "{{ agave_core_metadata_host | default( hostvars[ groups['core'][0] ]['ansible_ssh_host'] ) }}"
agave_core_notification_failed_db_port: "{{ agave_core_metadata_port | default('27017') }}"
agave_core_notification_failed_db_user: "{{ agave_core_metadata_user | default('wcs') }}"
agave_core_notification_failed_db_password: "{{ agave_core_metadata_password | default('changeme') }}"
agave_core_notification_failed_db_scheme: notifications

