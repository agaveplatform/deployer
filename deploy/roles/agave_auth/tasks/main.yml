# Installs/updates the auth infrastructure containers using docker compose.

---

- include_vars: tenants/{{ tenant_id }}/{{ tenant_id }}.yml
- include_vars: tenants/{{ tenant_id }}/{{ tenant_id }}_passwords

- set_fact:
    api_server_base: "{{ host }}"
  when: api_server_base is undefined

- debug: msg="{{ api_server_base }}"

- name: Remove contents of apim directory
  file:
    state: absent
    path: "/home/apim/auth-services/{{ item }}"
  loop:
    - "{{ tenant_id }}"
    - A
    - B
    - hap-compose.yml
  ignore_errors: yes
  become: yes
  when: remove_apim_dir|bool

- name: Ensure directories are present
  file:
    path: "{{ item }}"
    state: directory
    owner: apim
    mode: 0750
  become: yes
  with_items:
      - /home/apim/auth-services/A
      - /home/apim/auth-services/B
      - /home/apim/auth-services/logs
      - /home/apim/auth-services/logs/{{ tenant_id }}
      - /home/apim/auth-services/{{ tenant_id }}
      - /home/apim/auth-services/{{ tenant_id }}/apis
      - /home/apim/auth-services/{{ tenant_id }}/docs/v2

- name: Create logs file
  file:
    path: "{{ item }}"
    state: touch
    owner: apim
    mode: 0660
  become: yes
  with_items:
      - /home/apim/auth-services/logs/apim-logs
      - /home/apim/auth-services/logs/httpd-access-logs
      - /home/apim/auth-services/logs/httpd-error-logs
      - /home/apim/auth-services/logs/{{ tenant_id }}/deployment-logs

- name: Compile the tenant config file
  template:
    src: "tenants/{{ tenant_id }}/{{ tenant_id }}.yml"
    dest: "/home/apim/auth-services/{{ tenant_id }}/{{ tenant_id }}.yml"
    owner: apim
    mode: 0640
  become: yes

- name: Copy the password file
  copy:
    src: "tenants/{{ tenant_id }}/{{ tenant_id }}_passwords"
    dest: "/home/apim/auth-services/{{ tenant_id }}/passwords"
    owner: apim
    mode: 0640
  become: yes

- name: Compile core api templates
  template:
    src: "{{ item }}"
    dest: "/home/apim/auth-services/{{ tenant_id }}/apis/{{ item | basename }}"
    owner: apim
    mode: 0640
  with_fileglob:
    - ../templates/core_apis_19/*
  when: deploy_core_api_templates
  become: yes

- name: Copy tenant-specific httpd files
  copy:
    src: "tenants/{{ tenant_id }}/httpd/"
    dest: "/home/apim/auth-services/{{ tenant_id }}/httpd"
    owner: apim
    mode: 0640
  become: yes
  when: deploy_custom_tls_certs
  register: copy_auth_tls_certs
  ignore_errors: True

- name: Generate tls certs on remote host
  include_tasks: create_tls_certs.yml
  when: deploy_custom_tls_certs == False or copy_auth_tls_certs.failed

- name: Register custom_docs_exist
  local_action: stat path="{{ playbook_dir }}/tenants/{{ tenant_id }}/docs/v2/"
  register: custom_docs_exist
  become: no

- name: Copy custom docs
  copy:
    src: "tenants/{{ tenant_id }}/docs/v2"
    dest: "/home/apim/auth-services/{{ tenant_id }}/docs/"
    owner: apim
    mode: 0640
  when: custom_docs_exist.stat.exists == True
  become: yes

- name: Download the swagger docs template
  get_url:
      url: https://raw.githubusercontent.com/TACC/agavepy/master/agavepy/resources.json.j2
      dest: "{{ playbook_dir }}/roles/agave_auth/templates/agaveapi_v2.json.j2"
  delegate_to: 127.0.0.1
  when: custom_docs_exist.stat.exists == False
  become: no

- name: Compile the swagger template
  template:
    src: "agaveapi_v2.json.j2"
    dest: "/home/apim/auth-services/{{ tenant_id }}/docs/v2/agaveapi.json"
    owner: apim
    mode: 0640
  become: yes
  when: custom_docs_exist.stat.exists == False


- name: Compile tenant-specific apis
  template:
    src: "{{ item }}"
    dest: "/home/apim/auth-services/{{ tenant_id }}/apis/{{ item | basename }}"
    owner: apim
    mode: 0640
  with_fileglob:
    - "tenants/{{ tenant_id }}/apis/*"
  ignore_errors: yes
  become: yes

# need to ignore errors because tenant may not have defined any APIs
#- name: Copy tenant-specific apis
#  copy:
#    src: "tenants/{{ tenant_id }}/apis/"
#    dest: "/home/apim/auth-services/{{ tenant_id }}/apis"
#    owner: apim
#    mode: 0640
#  become: yes
#  ignore_errors: yes

- name: Copy custom oauth app
  copy:
    src: "tenants/{{ tenant_id }}/authenticationendpoint/"
    dest: "/home/apim/auth-services/{{ tenant_id }}/authenticationendpoint"
    owner: apim
    mode: 0640
  become: yes
  when: update_custom_oauth_app

- name: Copy the apim public key
  copy:
    src: "tenants/{{ tenant_id }}/publickey"
    dest: "/home/apim/auth-services/{{ tenant_id }}/publickey"
    owner: apim
    mode: 0640
  become: yes

- name: Copy the id_admin_settings script
  copy:
    src: "update_id_admin_settings.sh"
    dest: "/home/apim/auth-services/update_id_admin_settings.sh"
    owner: apim
    mode: 0750
  become: yes

# first, compile the compose file for the "green" deployment
- set_fact:
    primary_auth_compose: True

- name: Compile docker_compose template - A
  template:
    src: "docker-compose-noserf.yml.j2"
    dest: "/home/apim/auth-services/A/docker-compose-noserf.yml"
    owner: apim
    mode: 0640
  become: yes

# now, compile the compose file for the "blue" deployment
- set_fact:
    primary_auth_compose: False

- name: Compile docker_compose template - B
  template:
    src: "docker-compose-noserf.yml.j2"
    dest: "/home/apim/auth-services/B/docker-compose-noserf.yml"
    owner: apim
    mode: 0640
  become: yes

- name: Compile HA Proxy template
  template:
    src: "hap-compose.yml.j2"
    dest: "/home/apim/auth-services/hap-compose.yml"
    owner: apim
    mode: 0640
  become: yes


#- name: Check for existing auth containers
#  shell: /usr/local/bin/docker-compose -f /home/apim/auth-services/hap-compose.yml ps -q
#  args:
#    chdir: "/home/apim/auth-services"
#  become: yes
#  become_user: apim
#  ignore_errors: yes
#  register: docker_ps_auth_containers

# note: this should almost never be used; exception is when wanting to competely start from scratch.
- name: Remove all auth containers
  shell: /usr/local/bin/docker-compose -f /home/apim/auth-services/{{ item }} down
  args:
    chdir: "/home/apim/auth-services/"
  loop:
    - hap-compose.yml
    - A/docker-compose-noserf.yml
    - B/docker-compose-noserf.yml
  register: docker_rm_auth_containers
  environment:
    COMPOSE_HTTP_TIMEOUT: 20000
  ignore_errors: yes
  become: yes
  become_user: apim
  when: 
    - remove_all_auth_containers|bool 


- name: Wait for the auth containers to finish deleting
  pause:
    seconds: 30
  when:
    - remove_all_auth_containers|bool

- name: Pull auth containers images
  shell: /usr/local/bin/docker-compose -f /home/apim/auth-services/hap-compose.yml pull --ignore-pull-failures
  args:
    chdir: "/home/apim/auth-services"
  become: yes
  become_user: apim
  environment:
    COMPOSE_HTTP_TIMEOUT: 20000

- name: Ensure haproxy is running
  shell: /usr/local/bin/docker-compose -f /home/apim/auth-services/hap-compose.yml up -d
  args:
    chdir: "/home/apim/auth-services"
  become: yes
  become_user: apim
  environment:
    COMPOSE_HTTP_TIMEOUT: 20000

- name: Copy script to update apim apache rewrite rules
  template:
    src: update-apache-rewrite-rules.sh.j2
    dest: "/home/apim/auth-services/{{ tenant_id }}/update-apache-rewrite-rules.sh"
    owner: apim
    mode: 0750

- name: Compile pull_images template
  template:
    src: "pull_images.sh.j2"
    dest: "/home/apim/auth-services/pull_images.sh"
    mode: 0750
    owner: apim
  become: yes

- name: Pull latest docker images
  shell: /home/apim/auth-services/pull_images.sh
  become: yes
  become_user: apim

- name: Add deployment log entry.
  lineinfile:
    line: 'Deployer update {{ ansible_date_time.iso8601 }}'
    insertbefore: BOF
    dest: /home/apim/auth-services/logs/{{ tenant_id }}/deployment-logs
    state: present
    owner: apim
    mode: 0640
  become: yes
