# Installs/updates the auth infrastructure containers using docker compose.

---

- include_vars: tenants/{{ tenant_id }}/{{ tenant_id }}.yml
- include_vars: tenants/{{ tenant_id }}/{{ tenant_id }}_passwords

- set_fact:
    api_server_base: "{{ host }}"
  when: api_server_base is undefined

- debug: msg="{{ api_server_base }}"

- name: ensure directories are present
  file: path={{ item }} state=directory
  become: yes
  become_user: apim
  become_method: sudo
  with_items:
      - /home/apim/A
      - /home/apim/B
      - /home/apim/logs
      - /home/apim/logs/{{ tenant_id }}
      - /home/apim/{{ tenant_id }}
      - /home/apim/{{ tenant_id }}/apis
      - /home/apim/{{ tenant_id }}/docs/v2

- name: remove contents of apim directory
  shell: rm -rf /home/apim
  ignore_errors: yes
  become: yes
  become_user: apim
  become_method: sudo
  when: remove_apim_dir

- name: create logs file
  file: path={{ item }} state=touch
  become: yes
  become_user: apim
  become_method: sudo
  with_items:
      - /home/apim/logs/apim-logs
      - /home/apim/logs/httpd-access-logs
      - /home/apim/logs/httpd-error-logs
      - /home/apim/logs/{{ tenant_id }}/deployment-logs

- name: compile the tenant config file
  template: src=tenants/{{ tenant_id }}/{{ tenant_id }}.yml dest=/home/apim/{{ tenant_id }}/{{ tenant_id }}.yml
  become: yes
  become_user: apim
  become_method: sudo
      
#- name: copy the tenant config file
#  copy: src=tenants/{{ tenant_id }}/{{ tenant_id }}.yml dest=/home/apim/{{ tenant_id }}/{{ tenant_id }}.yml
#  become: yes
#  become_user: apim
#  become_method: sudo

- name: copy the password file
  copy: src=tenants/{{ tenant_id }}/{{ tenant_id }}_passwords dest=/home/apim/{{ tenant_id }}/passwords
  become: yes
  become_user: apim
  become_method: sudo

- name: compile core api templates
  template: src={{ item }} dest=/home/apim/{{ tenant_id }}/apis/{{ item | basename }}
  with_fileglob:
    - ../templates/core_apis_19/*
  when: deploy_core_api_templates
  become: yes
  become_user: apim
  become_method: sudo

- name: copy tenant-specific httpd files
  copy: src=tenants/{{ tenant_id }}/httpd/ dest=/home/apim/{{ tenant_id }}/httpd
  become: yes
  become_user: apim
  become_method: sudo
  when: deploy_custom_tls_certs
  register: copy_auth_tls_certs
  ignore_errors: True

- name: generate tls certs on remote host
  include_tasks: create_tls_certs.yml
  when: deploy_custom_tls_certs == False or copy_auth_tls_certs.failed

- name: register custom_docs_exist
  local_action: stat path="{{ playbook_dir }}/tenants/{{ tenant_id }}/docs/v2/"
  register: custom_docs_exist

- name: copy custom docs
  copy: src=tenants/{{ tenant_id }}/docs/v2 dest=/home/apim/{{ tenant_id }}/docs/
  when: custom_docs_exist.stat.exists == True
  become: yes
  become_user: apim
  become_method: sudo

- name: download the swagger docs template
  get_url:
      url: https://raw.githubusercontent.com/TACC/agavepy/master/agavepy/resources.json.j2
      dest: "{{ playbook_dir }}/roles/agave_auth/templates/agaveapi_v2.json.j2"
  delegate_to: 127.0.0.1
  when: custom_docs_exist.stat.exists == False

- name: compile the swagger template
  template: src=agaveapi_v2.json.j2 dest=/home/apim/{{ tenant_id }}/docs/v2/agaveapi.json
  become: yes
  become_user: apim
  become_method: sudo
  when: custom_docs_exist.stat.exists == False

# need to ignore errors because tenant may not have defined any APIs
- name: copy tenant-specific apis
  copy: src=tenants/{{ tenant_id }}/apis/ dest=/home/apim/{{ tenant_id }}/apis
  become: yes
  become_user: apim
  become_method: sudo
  ignore_errors: yes

- name: copy custom oauth app
  copy: src=tenants/{{ tenant_id }}/authenticationendpoint/ dest=/home/apim/{{ tenant_id }}/authenticationendpoint
  become: yes
  become_user: apim
  become_method: sudo
  when: update_custom_oauth_app

- name: copy the apim public key
  copy: src=tenants/{{ tenant_id }}/publickey dest=/home/apim/{{ tenant_id }}/publickey
  become: yes
  become_user: apim
  become_method: sudo

- name: copy the id_admin_settings script
  copy: src=update_id_admin_settings.sh dest=/home/apim/update_id_admin_settings.sh
  become: yes
  become_user: apim
  become_method: sudo

# first, compile the compose file for the "green" deployment
- set_fact:
    primary_auth_compose: True

- name: Compile docker_compose template - A
  template: src=docker-compose-noserf.yml.j2 dest=/home/apim/A/docker-compose-noserf.yml
  become: yes
  become_user: apim
  become_method: sudo

# now, compile the compose file for the "blue" deployment
- set_fact:
    primary_auth_compose: False

- name: Compile docker_compose template - B
  template: src=docker-compose-noserf.yml.j2 dest=/home/apim/B/docker-compose-noserf.yml
  become: yes
  become_user: apim
  become_method: sudo

- name: Compile hap template
  template: src=hap-compose.yml.j2 dest=/home/apim/hap-compose.yml
  become: yes
  become_user: apim
  become_method: sudo


- name: Check for existing auth containers
  shell: docker ps -aq
  become: yes
  become_user: apim
  become_method: sudo
  ignore_errors: yes
  register: docker_ps_auth_containers

# note: this should almost never be used; exception is when wanting to competely start from scratch.
- name: remove all auth containers
  shell: "docker ps -aq | xargs --no-run-if-empty docker rm -f"
  ignore_errors: yes
  become: yes
  become_user: apim
  become_method: sudo
  when: remove_all_auth_containers == True and docker_ps_auth_containers.stdout
  register: docker_rm_auth_containers

- name: wait for the auth containers to finish deleting
  pause: seconds=30
  when: remove_all_auth_containers and docker_rm_auth_containers is success

- name: pull auth containers images
  shell: docker-compose -f /home/apim/hap-compose.yml pull --ignore-pull-failures
  become: yes
  become_user: apim
  become_method: sudo
  environment:
      COMPOSE_HTTP_TIMEOUT: 20000

- name: ensure haproxy is running
  shell: docker-compose -f /home/apim/hap-compose.yml up -d
  become: yes
  become_user: apim
  become_method: sudo
  environment:
      COMPOSE_HTTP_TIMEOUT: 20000

- name: Compile pull_images template
  template: src=pull_images.sh.j2 dest=/home/apim/pull_images.sh
  become: yes
  become_user: apim
  become_method: sudo

- name: set permissions on pull_images.sh
  acl: permissions="rwx" name=/home/apim/pull_images.sh state=present etype=user entity=apim
  become: yes
  become_user: root
  become_method: sudo

- name: Pull latest docker images
  shell: sh pull_images.sh chdir=/home/apim
  become: yes
  become_user: apim
  become_method: sudo

- name: add deployment log entry.
  lineinfile:
    line: 'Deployer update {{ ansible_date_time.iso8601 }}'
    insertbefore: BOF
    dest: /home/apim/logs/{{ tenant_id }}/deployment-logs
    state: present
  become: yes
  become_user: apim
  become_method: sudo
