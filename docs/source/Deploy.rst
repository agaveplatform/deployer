======
Deploy
======

This section refers to the ``deploy`` directory which contains scripts and other files used for deploying components of Agave.
Deployment is accomplished with Ansible playbooks; Ansible 2.0+ is required. We recommend `installing and running from source`_.
(When running from source, make sure you activate the Ansible environment).

.. note:: A docker image containing all deployment files from this repository as well as the required version of Ansible is now
          available from the docker hub. The image is ``agaveplatform/deployer`` and image tags correspond to tags in this repository.
          The image will be kept up to date as changes are made. We highly recommend using the image instead of trying to run from source.


Components
==========

Broadly speaking, the Agave platform can be divided into three layers or components: auth, core and persistence. The auth component handles authentication
and authorization as well as supporting services for tasks such as API mediation and credential delegation. A fully compliant OAuth2 server is at the heart
of the auth layer as is a configurable hosted identity service backed be LDAP.

The heart of the Agave platform is the core science APIs, a set of REST APIs that provide the core Science-as-a-Service functionality.  The APIs themselves
do not handle authentication. Rather, they look for a signed JSON Web Token (JWT) in each request header from which they obtain the identity, scope,
authorization information, and other contextual information about the caller. The JWTs are generated by the Agave OAuth2 server in the auth layer.

The third component is the persistence layer - a set of third party databases and queues used to persist state.

For increased flexibility, each component ships as a set of Docker images, and each can be deployed independently of the others, though some configuration is needed
to wire the components together.


Hosts Files
===========

To deploy or update components of the Agave platform, you will need ssh access to one or more hosts, depending on your requirements. To deploy the
entire platform, a minimum of three virtual machines is recommended (one for each component) with 2 virtual cores and 4GB RAM each. For low usage
scenarios it is possible to deploy the entire platform on a single host using VM provider such as Virtualbox (or a derivative like Vagrant).

Create a host file for your deployment (see the ``host_files`` directory for examples). A group should be included for each component you wish to deploy. Valid
group names are auth, core and db and should be surrounded in brackets; for example:

.. code-block:: yaml

  [auth]

  [core]

  [db]


Within each component group are one or more lines representing a host (VM) in that group. Each line begins with a user-defined name (can be any string)
and then supplies a minimum set of parameters for connecting to the host via ssh. The following values should be provided:

   - ``ansible_ssh_host`` - host IP or publicly resolvable domain
   - ``ansible_ssh_user`` - linux account with root access on the machine


Additionally, one the following should be provided:
  - ``ansible_ssh_private_key_file`` - /path/to/private/key for the user
  - ``ansible_ssh_password`` - ssh password for the user

.. hint:: If sudo access requires a (separate) password, one
          should append the flag ``--ask-sudo-pass`` to the playbook
          command in order to be prompted for such
          a password. Otherwise, it will default to using the
          ``ansible_ssh_password`` or assume passwordless sudo if not
          provided.


Tenant Configuration
====================

Agave is a multi-tenant platform, and each tenant deploys a dedicated auth component while the other components (core and persistence) are shared across tenants.
In order to deploy an auth component, a ``tenant_id`` must be specified and configuration for that tenant must be provided.

Create a directory within the
``tenants`` directory with the same name as the ``tenant_id``. Immediately within that directory, create two files: ``<tenant_id>.yml`` and ``<tenant_id>_passwords``.
``<tenant_id>.yml`` contains all public configurations for the tenant while ``<tenant_id>_passwords`` contains sensitive data and will remain outside version control. Here are the configurable fields within ``<tenant_id>.yml`` and a description of their use:

  - ``tenant_id`` - a unique id for this tenant.
  - ``agave_env`` - (staging/prod). The Agave environment used for this tenant. Determines the core services that will be invoked. Note that the IP address for the core services can be resolved by docker compose using the extra_hosts stanza for platform deployments that are not in DNS.
  - ``host`` - the public domain that the platform should listen to  API requests on. For example, if this value is ``api.example.org``, then the core apps service will be available at ``https://api.example.org/apps/v2``.
  - ``tenant_admin_role`` - the name of the tenant admine role.
  - ``agave_profiles_url`` - URL for the profiles service. When the tenant uses the Agave hosted identity, this URL should be of the form ``profiles.<tenant_id>.agave.tacc.utexas.edu/profiles`` and will be resolved automatically; however, for other tenants such as iPlant, this URL will be different.
  - ``haproxy_auth_version`` - version of the HA Proxy auth service to use (new in 0.4.1, defaults to latest).
  - ``apim_httpd_version`` - version of the auth httpd service to use (new in 0.4.1, defaults to latest).
  - ``apim19_base_version`` - version of APIM 1.9 auth service to use (new in 0.4.1, defaults to latest).
  - ``agave_id_dedicated_version`` - version of the Agave ID auth service to use (new in 0.4.1, defaults to latest).
  - ``agave_clients_dedicated_version`` - version of the Agave clients auth service to use (new in 0.4.1, defaults to latest).
  - ``admin_services_nginx_version`` - version of the admin nginx auth service to use (new in 0.4.1, defaults to latest).
  - ``flask_admin_services_version`` - version of the admin auth service to use (new in 0.4.1, defaults to latest).
  - ``update_auth_dns`` - (True/False). Whether or not to update the /etc/hosts file with the location of the auth mysql server for the auth containers. Use this when the host name/domain for the mysql server is not in DNS.
  - ``core_api_protocol`` - (http or https). Protocol the auth services will use when communicating with the core services. Use ``http`` unless the auth services must communicate with the core services across a firewall.
  - ``update_apim_core_dns`` - (True/False). Whether or not to update the /etc/hosts file with the location of the core services within the APIM container. Use this when the host name/domain for the core services are not in DNS. NOTE: the APIM now routes all requests to ``<tenant_id>.api.<agave_env>.agaveapi.co`` so this is the value that must be in DNS.
  - ``core_host`` - IP of the core host. Used only when ``update_apim_core_dns`` is true.
  - ``deploy_admin_password_grant`` - (True/False). Provides a grant type for delegating credentials on behalf of other users.
  - ``access_token_validity_time`` - Time, in seconds, that OAuth access_tokens are valid.
  - ``apim_increase_global_timeout`` - (True/False). Whether or not to increase the APIM's global timeout config for APIs to respond. For very large file uploads, it is possible that the APIs will time out before responding to APIM, resulting in a 502. However, setting this to True will increase the timeout for *all* APIs. It will be possible to just increase the files API timeout in a future release.
  - ``deploy_custom_oauth_app`` - (True/False). Whether to deploy a custom-branded version of the OAuth login application. If true, install the ``authenticationendpoint`` application (in a directory with the same name) within the tenant directory.
  - ``boutique_apis`` - (Optional). A YAML list of API names from the catalog of extended APIs available in the platform (e.g., admin_services). Each API must be defined as a template in the boutique_apis role, and the name listed must match the name of the template file minus the extension (e.g. ``admin_services`` for ``admin_services.json.j2``).

  - ``ha_deployment`` - (True/False). For use in h/a deployments of the auth component requiring multiple hosts. Value True will deploy an HA Proxy instance on each auth host to facilitate an active-active architecture. Requires additional configuration, see below.
                                      NOTE: As of version 0.2.0, `ha_deployment=True` is required, as the deployment playbooks currently depend on it.
  - ``hap_servers`` - YAML mapping of servers to use for HAProxy. At least two entries are required, though it is possible to run both servers on the same host using IP addresses and ports on the Docker0 interface (see, for example, https://bitbucket.org/agaveapi/deployer/raw/e631dfa0c90346c5334cf1b22c2a2bf545804874/deploy/tenants/dev_sandbox/dev_sandbox.yml). Each entry must have the following properties:
        - ``name`` - name for the server; must be unique.
        - ``ip`` - IP for the server, addressable by the HAProxy container(s).
        - ``port`` - http port for the httpd instance for this server. Must be reachable by the HAProxy container(s).
        - ``ssl_port`` - https port for the httpd instance for this server. Must be reachable by the HAProxy container(s).

  - ``hap_auth_ip_1`` and ``hap_auth_ip_2`` (deprecated -- use ``hap_servers``)- IP addresses of the two HA Proxy servers.
  - ``hap_http_auth_port_1`` and ``hap_http_auth_port_2`` (deprecated -- use ``hap_servers``)- Ports of the two HA Proxy servers.

  - ``mysql_host`` - the domain for the mysql host used by the auth services.
  - ``mysql_port`` - the port for the mysql host used by the auth services.

  - ``use_hosted_id`` - (True/False) - whether or not to use Agave hosted identity services. Cannont be used when the ``use_hosted_id`` setting is True. Use this config when Agave will be administering its own LDAP.
  - ``use_remote_userstore`` (True/False) - whether to configure a remote userstore. Use this config when the LDAP will be administered by a third party. Cannot be used when the ``use_hosted_id`` setting is True. Currently, this configuration supports read only LDAP databases  (for instance with the TACC tenant).
  - ``agave_id_read_only`` (True/False) - whether the hosted id service should run in read only mode.
  - ``hosted_id_domain_name`` - a unique id for the agaveldap hosted userstore (required, but only relevant when using multiple userstores within a single tenant). Use this config when Agave will be administering its own LDAP.
  - ``remote_id_domain_name`` - a unique id for the remote userstore (required, but only relevant when using multiple userstores within a single tenant). Use this config when the LDAP will be administered by a third party.
  - ``ldap_name`` - URL or service discovery token for the hosted LDAP instance (including port).
  - ``auth_ldap_bind_dn`` - account to bind to the LDAP db.
  - ``ldap_base_search_dn`` - base search directory for user accounts.
  - ``agave_id_check_jwt`` - Whether or not to check the JWT; When this is False, certain features will not be available such as the "me" lookup feature since these features rely on profile information in the JWT.
  - ``jwt_header`` - Actual header name that will show up in request.META; value depends on APIM configuration, in particular the tenant id specified in api-manager.xml.
  - ``agave_id_apim_pub_key`` - Absolute path to the public key of the APIM instance; used for verifying the signature of the JWT.
  - ``agave_id_user_admin_role`` - Role required to make updates to the LDAP database.
  - ``agave_id_check_user_admin_role`` (True/False) - Whether or not the ``agave_id_user_admin_role`` before allowing updates to the LDAP db.
  - ``agave_id_app_base`` - sets the base URL for the hypermedia responses; Typically this should be the same as host but should include the protocol.
  - ``cert_file`` -  should be a path relative to the httpd directory contained within the tenant directory for this tenant: e.g. deploy/tenants/dev_staging/httpd
  - ``cert_key_file`` - should be a path relative to the httpd directory contained within the tenant directory for this tenant.
  - ``ssl_ca_cert_file`` - add when mounting in a CA cert (not used for self-signed certs). Should be a path relative to the httpd directory contained within the tenant directory for this tenant.
  - ``use_custom_ldap`` - (True/False). Use this setting when using a remote userstore and the ldap has a different schema then the hosted Agave LDAP (for example, the iPlant and TACC LDAPs). NOTE: Only certain schemas are supported. See the agave_id bitbucket project for more details.

  - ``agave_id_create_notifications`` - (True/False). Whether or not the auth services should send notifications to beanstalk (see settings below). The auth services must have access to the beanstalk IP and port.
  - ``beanstalk_server`` - IP address of beanstalk instance.
  - ``beanstalk_port`` - Port of beanstalk instance.
  - ``beanstalk_tube`` - Beanstalk tube name that the auth services will send messages to.
  - ``beanstalk_srv_code`` - Code for the service to use when generating messages. There is one code per core service.
  - ``tenant_uuid`` - The UUID of the tenant; this is only used by the components when sending messages to beanstalk.

  - ``virtualhosts`` - A yaml list of collections for configuring the virtualhosts that the auth services will listen on. Defining multiple configuration collections allows the tenant auth server to respond to multiple domains (e.g. ``agave.iplantc.org`` and ``iplantc-org.tenants.prod.agaveapi.cp``). Each configuration collection should define the following (see, ``iplantc-org`` for example) :
       - ``server_name`` - the domain to respond to.
       - ``base_cert_path`` - the directory inside the httpd container that will hold the certs. This can be anything, and the agave_id container will create the directory if it does not exist, but it must be defined.
       - ``cert_file`` - the cert file used by httpd; this file must be installed within the ``httpd`` folder within the tenant folder.
       - ``cert_key_file`` - the cert key file used by httpd; this file must be installed within the ``httpd`` folder within the tenant folder.
       - ``ssl_ca_cert_file`` - the CA bundle file used by httpd; this file must be installed within the ``httpd`` folder within the tenant folder.
  - ``deploy_admin_services`` - (True/False) whether to deploy the tenant admin services (default to False).
  - ``boutique_apis`` - (Optional) A YAML list of strings representing additional APIs to deploy. Each API in the list should be an API recognized by the ``boutique_apis`` role. These are the officially supported boutique APIs. Additional APIs can be added to a the set of officially supported APIs by simply adding an <api>.json.j2 template to the ``roles/boutique_apis/templates`` directory. The JSON should be formatted as required by the Admin services ``/apis`` service. (Note: this role requires the admin services to be deployed on the auth host).

Here are the configurable fields within ``<tenant_id>_passwords`` and a description.

  - ``auth_ldap_bind_password`` - the password used to bing to the hosted LDAP. Should be configured when ``use_hosted_id`` is true.
  - ``remote_auth_ldap_bind_password`` - the password used to bind to the remote LDAP. Should be configured when ``use_remote_userstore`` is true.
  - ``apim_admin_pass`` - the password for the APIM admin account. NOTE: this must first be reset using the APIM password reset form within the carbon admin application. Changing this setting prior to updating the password via the web form will break the APIM.
  - ``mysql_tenant_user`` - the username that APIM should use to authenticate to MySQL.
  - ``mysql_tenant_pass`` - the password that APIM should use to authenticate to MySQL.

Within the ``<tenant_id>`` directory, a directory called ``apis`` should be created to hold the definition files of any boutique APIs that are needed.
Finally, create a subdirectory ``httpd`` within the ``<tenant_id>`` directory with the apache .crt and .key files needed. See the dev_staging directory for examples.

NOTE: As of deployer:0.4.5, the approach of storing boutique APIs in the ``apis`` directory has been deprecated and a change has been made to how the API XML configuration files are stored.
With 0.4.5+, the XML API config files for the core services are stored directly on the auth host (not shipped in the APIM container) and are compiled from templates packged in deployer.
For each auth host, the ``update_tenant.plbk`` should be executed with ``deploy_core_api_templates=True`` at least one time.
For additional boutique APIs, use the ``boutique_apis`` configuration (see above).


Core Configuration
==================

When deploying the core science APIs a configuration file and passwords file are needed. By convention, the configuration file is named ``<environment>.yml`` and the passwords file is named ``<environment>_passwords``. Nevertheless, the name of config file must be passed in the variable ``core_config_file`` to Ansible for any playbooks that are deploying or modifying core services. For simplicity, Agave makes the convention of setting this variable in the inventory file for each core host. Alternatively, the variable can be passed on the command line when issuing the ``ansible-playbook`` command using the ``-e`` flag. Note that it cannot be set in the tenants config file or any other configuration file.

Both files should be placed within the ``agave_core_configs`` directory within the ``deploy`` directory. The ``dev_staging.yml`` and ``dev_staging_passwords`` included there provide examples of the configs. Here we list the required configuration fields for the ``<environment>.yml`` file and a description of their use:

Starting with deployer:0.5.0, two strategies for deploying the core APIs are supported. The simplest approach
deploys all core service containers on a single host and leverages a collection of Docker compose templates bundled with
the deployer repository. The second approach leverages an external git repository with one or more collections of compose
files. In the later case, any number of core hosts can be utilized, and each host can be deployed with a different set of
compose files from the git repository. Note that these are not templates, so the compose files must live in a private
repository (they must contain sensitive information such as database passwords). Set ``deploy_core_default_templates=True``
to use the simpler approach, or set ``deploy_core_default_templates=False`` and configure the various additional
``core_compose_*`` variables to use the more complicated approach. If you would like examples of


  - ``deploy_core_apis`` - (True/False). Whether to deploy the front-end core APIs. Set to False when running playbooks that impact multiple servers and you do not want to modify the core APIs.
  - ``deploy_core_apis_a_deployment`` - (True/False). The core APIs deploy in an A/B configuration to minimize downtime during updates. Set this to true to deploy the "A" set. One of "A" or "B" should be set to true.
  - ``deploy_core_apis_b_deployment`` - (True/False). The core APIs deploy in an A/B configuration to minimize downtime during updates. Set this to true to deploy the "B" set. One of "A" or "B" should be set to true.
  - ``agave_core_workers_only`` - (True/False). Whether to deploy the core workers. Using this feature you can deploy only the workers. NOTE: this feature is experimental.
  - ``kill_core_containers`` - (True/False). Whether to remove any existing core containers when deploying.
  - ``agave_core_version`` - Version of the core services to deploy (e.g. 2.2.6).
  - ``agave_core_hostname`` - Hostname for the core services.
  - ``core_deploy_ssl_certs`` - (True/False) Whether or not to use custom SSL certs for core services. If False, deployer will use stock (self-signed) certs for core services. In general, this is not an issue since the core services are not directly exposed to external users (SSL termination for external requests happens in the auth layer). However, if you have the need to export core services and/or terminate SSL in the core layer, set this to True and provide ssl certs using the "agave_core_ssl_cert", "agave_core_ssl_key" and "agave_core_ca_cert".
  - ``agave_core_ssl_cert`` - Path in the container to core ssl cert. This file should be placed in the ``roles/agave_core/files/core-apis-ssl`` directory.
  - ``agave_core_ssl_key`` - Path in the container to core ssl cert key. This file should be placed in the ``roles/agave_core/files/core-apis-ssl`` directory.
  - ``agave_core_ca_cert`` - Path in the container to core ssl CA cert. This file should be placed in the ``roles/agave_core/files/core-apis-ssl`` directory.
  - ``agave_core_java_mem_limit`` - Memory limit for each of the Java core service containers.
  - ``agave_core_allow_relay_transfer`` - Whether to allow relay transfers from the files and transforms services.
  - ``agave_core_max_relay_transfer_size`` - Max transfer size, in GB.
  - ``agave_core_max_page_size`` - Maximum number of results to return in a single request.
  - ``agave_core_default_page_size`` - Default number of results to return in a single request when the ``limit`` query parameter has not been passed.
  - ``agave_core_iplant_proxy_service`` - resolvable address of the core proxy. For single core server deploys, should point to the core server.
  - ``core_docker_private_registry`` - (Optional) address of private registry to pull Docker images from.
  - ``core_docker_registry_account`` - (Optional) username to use for accessing the private registry.
  - ``deploy_core_default_templates`` - Whether to use the default core compose templates. Set to False to use a git repository of compose files or True to use the default templates. NOTE: this variable must be set in the core_configs.yml AS WELL AS in the inventory file for each core host. See the staging_hosts file for an example.
  - ``core_compose_repo_uri`` - URI of the git repository containing the core compose files (e.g., ``git@gitlab.tacc.utexas.edu:jdoe/core-compose.git``)
  - ``core_compose_repo_key_file`` - file name for the SSH key to use to access the git repository. NOTE: it is assumed that this file is in ``roles/agave_core_compose_repo/files`` so it should be mounted there.
  - ``core_compose_repo_name`` - The name of the git repository containing the core compose files (e.g. ``core-compose``).
  - ``core_compose_repo_path`` - Relative path inside the git repo to use for the compose files. Note: Set this variable for each core host in the inventory file.


  - ``agave_core_realtime_service_type`` - Type of backend service to use for realtime API. Currently value ``fanout``, ``pushpin``, and ``none`` are supported.
  - ``agave_core_realtime_service`` - Addressable location of the backend (fanout) service for realtime API.
  - ``agave_core_realtime_service_realm_id`` - Realm id when using the fanout backend.
  - ``agave_core_realtime_service_realm_key`` - realm key when using the fanout backend.

  - ``mysql_core_host`` - Core MySQL host.
  - ``mysql_core_port`` - Core MySQL port.
  - ``mysql_core_user`` - Core MySQL user to connect to the MySQL database with.

  - ``agave_core_metadata_db_host`` - Mongo host for core services.
  - ``agave_core_metadata_db_port`` - Mongo port for core services.
  - ``agave_core_metadata_db_user`` - Mongo user for core services.

  - ``agave_core_notification_queue`` - Beanstalk queue for core services. (e.g. ``staging.notifications.queue``)
  - ``agave_core_notification_topic`` - Beanstalk topic for core services. (``staging.notifications.topic``)
  - ``agave_core_messaging_host`` - Host for Beanstalk server.
  - ``agave_core_messaging_port`` - Port for Beanstalk server.

  - ``agave_core_smtps_provider`` - Type of SMTP server to use (for sending notification emails, etc.). Use ``sendgrid`` to enable emails sent via ``sendgrid.net``, requires account info).
  - ``agave_core_smtps_host`` - Host for the SMTP server. (use ``smtp.sendgrid.net`` to use sendgrid)
  - ``agave_core_smtps_port`` - Port for the SMTP server.
  - ``agave_core_smtps_auth`` - (True/False). Whether auth is required.
  - ``agave_core_smtps_user`` - User to use when authenticating.

  - ``core_deploy_stats`` - (True/False). Whether to deploy the stats container. NOTE: that this container is currently optimized for Agave's production environment and requires a Pingdom account, among other configurations.

Here we list the required configuration fields for the ``<environment>_passwords`` file and a description of their use:

  - ``mysql_core_password`` - password for the core MySQL connection.
  - ``agave_core_smtps_password`` - password for the SMTP server.
  - ``agave_core_iplant_internal_account_service_key`` - valid OAuth2 client key for the core services.
  - ``agave_core_iplant_internal_account_service_secret`` - valid OAuth2 client secret for the core services.
  - ``agave_core_metadata_db_password`` - password for the Mongo db server.


Deploying the Platform
======================

For reusability, discrete units of functionality are packaged into Ansible roles contained within the ``roles`` directory within ``deploy`` folder. Additionally,
the project includes several Ansible playbooks representing common operations use cases.

To use existing playbooks, the simplest approach for machines running Docker might be to use the Agave deployer Docker image, ``agaveapi/deployer``. This
image bundles all the Ansible playbooks and roles together with the specific version of Ansible that they require. All tenant configuration
included in the repository is also bundled, though password files and other security sensitive files (e.g. httpd certificate files) are not included. The
entrypoint for the image is ``ansible-playbook``, so running a playbook using the image involves passing the playbook arguments after mounting any
configuration files not already included. The basic format is as follows:

``docker run <volume mounts> agaveapi/deployer -i <hosts file> <playbook>``

There are a couple of points worth noting. First, paths referred to in the ``docker run`` statement are relative to the ``deploy`` directory from within the container. Any files not included in the image must be mounted in to a path relative to this image. Some files that will need to be mounted:
  - ``hosts`` file, if different from the hosts files included in the ``deployer`` repository.
  - ``ssh_keys`` - the keys used to ssh to the hosts are not includes and must be mounted in. NOTE: the host files included in the repository refer to the ssy keys using a relative path: ``~/.ssh/id_rsa``. Since the playbook runs as the container's root user, one can mount the keys to ``/root/.ssh/id_rsa`` and still make use of the existing host files.
  - ``<tenant_id>_passwords`` and ``<environment>_passwords`` - passwords files are not included in the image.
  - any tenant config files that are not included in ``deployer`` repository.

Here is an example invocation where we mount several files into the container:

``docker run --rm -v /home/jdoe/ansible/keys/prod:/root/.ssh/id_rsa  -v /home/jdoe/ansible/tenants/dev_staging/dev_staging_passwords:/deploy/tenants/dev_staging/dev_staging_passwords -v /home/jdoe/ansible/tenants/dev_staging/httpd:/deploy/tenants/dev_staging/httpd agaveapi/deployer -i /deploy/host_files/staging_hosts /deploy/update_tenant.plbk``

More playbooks are continuing to be developed to provide more
functionality out of the box, and developing additional use cases and/or roles should be straight-forward for any developer familiar with Ansible.

We highlight a few roles that are particularly useful.

  - ``agave_host`` - this role provides basic capabilities to the host including creating the linux service account that all Agave services will run under.
  - ``docker_host`` - this role deploys and configures the docker daemon as well as dependent tools such as docker compose.
  - ``agave_auth`` - this role is used to deploy and update an Agave auth component. (Relies on ``agave_host`` and ``docker_host``).
  - ``agave_core`` - this role is used to deploy and update an Agave core component. (Relies on ``agave_host`` and ``docker_host``).
  - ``agave_db_onehost`` - this role deploys the entire Agave persistence layer on a single VM -- not recommended for production. (Relies on ``agave_host`` and ``docker_host``).
  - ``mysql_apim`` - this role configures a mysql database for use by an Agave auth component and pre-loads all necessary users and schemas.
  - ``ldap_apim`` - this role pre-loads an LDAP database with test accounts for use in a sandbox setting.


We highlight a few playbooks that are particularly useful. Specific documentation on usage is available in the playbook file.

  - ``deploy_agave.plbk`` - this playbook deploys all three agave components from scratch on a set of three VMs.
  - ``deploy_core.plbk`` - this playbook deploys the core component on a single VM. It currently requires a core configuration file (see section above) tenant_id, and hosts file since it uses the tenant_id configuration for configuration regarding connectivity with the persistence layer.
  - ``update_core.plbk`` - this playbook updates the core component on a single VM. It currently requires a core configuration file (see section above) tenant_id, and hosts file since it uses the tenant_id configuration for configuration regarding connectivity with the persistence layer.
  - ``new_tenant.plbk`` - this playbook deploys an auth component from scratch. In particular, it loads empty sql schemas for the authorization data and thus, if run on an existing tenant those data will be lost.
  - ``update_tenant.plbk`` - this playbook updates the configuration and containers for the auth component of an existing tenant. It does not touch the persistence layer.

Here are some of the main playbook parameters. Not all apply to all playbooks. See playbook files for specific documentation.
  - ``tenant_id`` - The tenant id to deploy; required for ``deploy_agave.plbk`` since there could be multiple tenants.
  - ``core_config_file`` - The core config file name (without the ``.yml``) to use. Required for ``deploy_agave.plbk`` and ``*_core.plbk``.
  - ``docker_version`` - Use a (newer) version of Docker than the default configured in deployer. This is optional and should be tested before using in production.
  - ``deploy_core_default_templates`` (True/False) - Whether to use the default docker compose templates for the core services (see above). Required for ``deploy_agave.plbk`` and ``*_core.plbk``
  - ``clean_host`` (True/False) - Whether to wipe all service files, Ansible temp files and docker containers on the hosts before running additional scripts. Default is ``False`` -- should not be used on production hosts.



.. _installing and running from source: http://docs.ansible.com/intro_installation.html#installing-the-control-machine
